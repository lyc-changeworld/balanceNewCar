###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        15/Aug/2016  15:07:16
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\oled.c
#    Command line =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\oled.c -D LPLD_K60 -D
#        USE_K60D10 -lCN
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\ -lB
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\ -o
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "F:\Program
#        Files\IAR_FOR_ARM\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\app\ -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\CPU\ -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\common\
#        -I E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\HW\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\FatFs\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\FatFs\option\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\common\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\driver\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\descriptor\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\class\
#        -Ol -I "F:\Program Files\IAR_FOR_ARM\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\oled.lst
#    Object file  =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\Obj\oled.o
#
###############################################################################

E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\oled.c
      1          /********************************************
      2          使用说明：
      3          OLED电源使用3.3V。   
      4          ----------------
      5          G    电源地
      6          3.3V 接3.3V电源
      7          D0   PORTA_PA15 
      8          D1   PORTA_PA16
      9          RST  PORTA_PA13 
     10          DC   PORTA_PA12
     11          CS   已接地，不用接
     12          ********************************************/
     13          /*
     14          4线SPI使用说明：
     15          VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
     16          VCC 供内部逻辑电压 1.8~6V   
     17          GND 地
     18          
     19          BS0 低电平
     20          BS1 低电平
     21          BS2 低电平
     22          
     23          CS  片选管脚
     24          DC  命令数据选择管脚
     25          RES 模块复位管脚 
     26          D0（SCLK） ，时钟脚，由MCU控制
     27          D1（MOSI） ，主输出从输入数据脚，由MCU控制
     28          
     29          D2 悬空      
     30          D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
     31          RD  低电平 ，也可悬空，但最好设为低电平
     32          RW  低电平 ，也可悬空，但最好设为低电平
     33          RD  低电平 ，也可悬空，但最好设为低电平   
     34          */
     35          //GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(14));	//IO口输出低电平，亮
     36          //GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(14));	//IO口输出高电平，灭
     37          //GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(15));	//IO口输出低电平，亮
     38          //GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(15));	//IO口输出高电平，灭
     39          //GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(16));	//IO口输出低电平，亮
     40          //GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(16));	//IO口输出高电平，灭
     41          //GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(17));	//IO口输出低电平，亮
     42          //GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(17));	//IO口输出高电平，灭
     43          
     44          #include "common.h"
     45          #include "oled.h"
     46          #include "HW_GPIO.H"

   \                                 In section .bss, align 4
     47          GPIO_InitTypeDef gpio_init_struct0;
   \                     gpio_init_struct0:
   \   00000000                      DS8 20
     48          

   \                                 In section .rodata, align 4
     49          const char table[10]={'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
   \                     table:
   \   00000000   0x30 0x31          DC8 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0, 0
   \              0x32 0x33    
   \              0x34 0x35    
   \              0x36 0x37    
   \              0x38 0x39    
   \              0x00 0x00    
     50          
     51          /**********************OLED显示屏引脚初始化********************/

   \                                 In section .text, align 2, keep-with-next
     52          void init_gpio_oled()
     53          {
   \                     init_gpio_oled: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     54            gpio_init_struct0.GPIO_PTx = PTA;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff000
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     55            gpio_init_struct0.GPIO_Pins = GPIO_Pin15|GPIO_Pin16|GPIO_Pin13|GPIO_Pin12;
   \   0000000C   0xF45F 0x30D8      MOVS     R0,#+110592
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000014   0x6048             STR      R0,[R1, #+4]
     56            gpio_init_struct0.GPIO_Dir = DIR_OUTPUT;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   0000001C   0x7308             STRB     R0,[R1, #+12]
     57            gpio_init_struct0.GPIO_Output = OUTPUT_L;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000024   0x7348             STRB     R0,[R1, #+13]
     58            gpio_init_struct0.GPIO_PinControl = IRQC_DIS;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   0000002C   0x6088             STR      R0,[R1, #+8]
     59            LPLD_GPIO_Init(gpio_init_struct0);
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000032   0xB084             SUB      SP,SP,#+16
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x2214             MOVS     R2,#+20
   \   00000038   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003C   0xBC0F             POP      {R0-R3}
   \   0000003E   0x.... 0x....      BL       LPLD_GPIO_Init
     60          }
   \   00000042   0xBD01             POP      {R0,PC}          ;; return
     61          /********************数字转字符显示*************************/

   \                                 In section .text, align 2, keep-with-next
     62          void  Num2Str(uint8 *str,int32 number)
     63          {
   \                     Num2Str: (+1)
   \   00000000   0xB410             PUSH     {R4}
     64            static uint8 i,j,Num_Wide;
     65            static int32 number_sign;
     66            static int32 temp;
     67            j=0;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable10_2
   \   00000008   0x701A             STRB     R2,[R3, #+0]
     68            if(number<0)
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD506             BPL.N    ??Num2Str_0
     69            {
     70              number = -number;
   \   0000000E   0x4249             RSBS     R1,R1,#+0
     71              str[0]='-';
   \   00000010   0x222D             MOVS     R2,#+45
   \   00000012   0x7002             STRB     R2,[R0, #+0]
     72              j=1;
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0x.... 0x....      LDR.W    R3,??DataTable10_2
   \   0000001A   0x701A             STRB     R2,[R3, #+0]
     73            }
     74            number_sign = temp = number;
   \                     ??Num2Str_0: (+1)
   \   0000001C   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   00000020   0x6011             STR      R1,[R2, #+0]
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   00000026   0x6812             LDR      R2,[R2, #+0]
   \   00000028   0x.... 0x....      LDR.W    R3,??DataTable10_4
   \   0000002C   0x601A             STR      R2,[R3, #+0]
     75            if(number>=10)
   \   0000002E   0x290A             CMP      R1,#+10
   \   00000030   0xDB5B             BLT.N    ??Num2Str_1
     76            {
     77              for(Num_Wide = j;temp != 0;Num_Wide++)
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00000036   0x7809             LDRB     R1,[R1, #+0]
   \   00000038   0x.... 0x....      LDR.W    R2,??DataTable10_5
   \   0000003C   0x7011             STRB     R1,[R2, #+0]
   \   0000003E   0xE00F             B.N      ??Num2Str_2
     78              {
     79                temp = temp/10;
   \                     ??Num2Str_3: (+1)
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   00000044   0x6809             LDR      R1,[R1, #+0]
   \   00000046   0x220A             MOVS     R2,#+10
   \   00000048   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000004C   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   00000050   0x6011             STR      R1,[R2, #+0]
     80              }
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable10_5
   \   00000056   0x7809             LDRB     R1,[R1, #+0]
   \   00000058   0x1C49             ADDS     R1,R1,#+1
   \   0000005A   0x.... 0x....      LDR.W    R2,??DataTable10_5
   \   0000005E   0x7011             STRB     R1,[R2, #+0]
   \                     ??Num2Str_2: (+1)
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0x2900             CMP      R1,#+0
   \   00000068   0xD1EA             BNE.N    ??Num2Str_3
     81              for(i=0;i<Num_Wide && number_sign!=0;i++)
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x.... 0x....      LDR.W    R2,??DataTable10_6
   \   00000070   0x7011             STRB     R1,[R2, #+0]
   \   00000072   0xE027             B.N      ??Num2Str_4
     82              {
     83                str[Num_Wide-i-1] = table[number_sign%10];
   \                     ??Num2Str_5: (+1)
   \   00000074   0x210A             MOVS     R1,#+10
   \   00000076   0x.... 0x....      LDR.W    R2,??DataTable10_5
   \   0000007A   0x7812             LDRB     R2,[R2, #+0]
   \   0000007C   0x.... 0x....      LDR.W    R3,??DataTable10_6
   \   00000080   0x781B             LDRB     R3,[R3, #+0]
   \   00000082   0x1AD2             SUBS     R2,R2,R3
   \   00000084   0x1812             ADDS     R2,R2,R0
   \   00000086   0x.... 0x....      LDR.W    R3,??DataTable10_4
   \   0000008A   0x681B             LDR      R3,[R3, #+0]
   \   0000008C   0x.... 0x....      LDR.W    R4,??DataTable10_4
   \   00000090   0x6824             LDR      R4,[R4, #+0]
   \   00000092   0xFB94 0xF4F1      SDIV     R4,R4,R1
   \   00000096   0xFB01 0x3114      MLS      R1,R1,R4,R3
   \   0000009A   0x.... 0x....      LDR.W    R3,??DataTable10_7
   \   0000009E   0x5CC9             LDRB     R1,[R1, R3]
   \   000000A0   0xF802 0x1C01      STRB     R1,[R2, #-1]
     84                number_sign = number_sign/10;
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable10_4
   \   000000A8   0x6809             LDR      R1,[R1, #+0]
   \   000000AA   0x220A             MOVS     R2,#+10
   \   000000AC   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000000B0   0x.... 0x....      LDR.W    R2,??DataTable10_4
   \   000000B4   0x6011             STR      R1,[R2, #+0]
     85              }
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable10_6
   \   000000BA   0x7809             LDRB     R1,[R1, #+0]
   \   000000BC   0x1C49             ADDS     R1,R1,#+1
   \   000000BE   0x.... 0x....      LDR.W    R2,??DataTable10_6
   \   000000C2   0x7011             STRB     R1,[R2, #+0]
   \                     ??Num2Str_4: (+1)
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable10_6
   \   000000C8   0x7809             LDRB     R1,[R1, #+0]
   \   000000CA   0x.... 0x....      LDR.W    R2,??DataTable10_5
   \   000000CE   0x7812             LDRB     R2,[R2, #+0]
   \   000000D0   0x4291             CMP      R1,R2
   \   000000D2   0xD204             BCS.N    ??Num2Str_6
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable10_4
   \   000000D8   0x6809             LDR      R1,[R1, #+0]
   \   000000DA   0x2900             CMP      R1,#+0
   \   000000DC   0xD1CA             BNE.N    ??Num2Str_5
     86              str[Num_Wide] = '\0';
   \                     ??Num2Str_6: (+1)
   \   000000DE   0x2100             MOVS     R1,#+0
   \   000000E0   0x.... 0x....      LDR.W    R2,??DataTable10_5
   \   000000E4   0x7812             LDRB     R2,[R2, #+0]
   \   000000E6   0x5411             STRB     R1,[R2, R0]
   \   000000E8   0xE00C             B.N      ??Num2Str_7
     87            }
     88            else
     89            {
     90              str[j] = table[number];
   \                     ??Num2Str_1: (+1)
   \   000000EA   0x.... 0x....      LDR.W    R2,??DataTable10_7
   \   000000EE   0x5C89             LDRB     R1,[R1, R2]
   \   000000F0   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   000000F4   0x7812             LDRB     R2,[R2, #+0]
   \   000000F6   0x5411             STRB     R1,[R2, R0]
     91              str[j+1] ='\0';
   \   000000F8   0x2100             MOVS     R1,#+0
   \   000000FA   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   000000FE   0x7812             LDRB     R2,[R2, #+0]
   \   00000100   0x1810             ADDS     R0,R2,R0
   \   00000102   0x7041             STRB     R1,[R0, #+1]
     92            }
     93          }
   \                     ??Num2Str_7: (+1)
   \   00000104   0xBC10             POP      {R4}
   \   00000106   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 1
   \                     ??i:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??j:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??Num_Wide:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??number_sign:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??temp:
   \   00000000                      DS8 4
     94          /**********************OLED显示屏触发启动**********************/

   \                                 In section .text, align 2, keep-with-next
     95          void LCD_Init(void)        
     96          {
   \                     LCD_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     97            PTA15_O=1;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable10_8  ;; 0x43fe003c
   \   00000008   0x6008             STR      R0,[R1, #+0]
     98            //LCD_CS=1;	//预制SLK和SS为高电平   	
     99            PTA13_O=0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable10_9  ;; 0x43fe0034
   \   00000010   0x6008             STR      R0,[R1, #+0]
    100            LCD_DLY_ms(50);
   \   00000012   0x2032             MOVS     R0,#+50
   \   00000014   0x.... 0x....      BL       LCD_DLY_ms
    101            PTA13_O=1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable10_9  ;; 0x43fe0034
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    102            
    103            LCD_WrCmd(0xae);//--turn off oled panel
   \   00000020   0x20AE             MOVS     R0,#+174
   \   00000022   0x.... 0x....      BL       LCD_WrCmd
    104            LCD_WrCmd(0x00);//---set low column address
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       LCD_WrCmd
    105            LCD_WrCmd(0x10);//---set high column address
   \   0000002C   0x2010             MOVS     R0,#+16
   \   0000002E   0x.... 0x....      BL       LCD_WrCmd
    106            LCD_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
   \   00000032   0x2040             MOVS     R0,#+64
   \   00000034   0x.... 0x....      BL       LCD_WrCmd
    107            LCD_WrCmd(0x81);//--set contrast control register
   \   00000038   0x2081             MOVS     R0,#+129
   \   0000003A   0x.... 0x....      BL       LCD_WrCmd
    108            LCD_WrCmd(0xcf); // Set SEG Output Current Brightness
   \   0000003E   0x20CF             MOVS     R0,#+207
   \   00000040   0x.... 0x....      BL       LCD_WrCmd
    109            LCD_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
   \   00000044   0x20A1             MOVS     R0,#+161
   \   00000046   0x.... 0x....      BL       LCD_WrCmd
    110            LCD_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
   \   0000004A   0x20C8             MOVS     R0,#+200
   \   0000004C   0x.... 0x....      BL       LCD_WrCmd
    111            LCD_WrCmd(0xa6);//--set normal display
   \   00000050   0x20A6             MOVS     R0,#+166
   \   00000052   0x.... 0x....      BL       LCD_WrCmd
    112            LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
   \   00000056   0x20A8             MOVS     R0,#+168
   \   00000058   0x.... 0x....      BL       LCD_WrCmd
    113            LCD_WrCmd(0x3f);//--1/64 duty
   \   0000005C   0x203F             MOVS     R0,#+63
   \   0000005E   0x.... 0x....      BL       LCD_WrCmd
    114            LCD_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
   \   00000062   0x20D3             MOVS     R0,#+211
   \   00000064   0x.... 0x....      BL       LCD_WrCmd
    115            LCD_WrCmd(0x00);//-not offset
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      BL       LCD_WrCmd
    116            LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
   \   0000006E   0x20D5             MOVS     R0,#+213
   \   00000070   0x.... 0x....      BL       LCD_WrCmd
    117            LCD_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
   \   00000074   0x2080             MOVS     R0,#+128
   \   00000076   0x.... 0x....      BL       LCD_WrCmd
    118            LCD_WrCmd(0xd9);//--set pre-charge period
   \   0000007A   0x20D9             MOVS     R0,#+217
   \   0000007C   0x.... 0x....      BL       LCD_WrCmd
    119            LCD_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
   \   00000080   0x20F1             MOVS     R0,#+241
   \   00000082   0x.... 0x....      BL       LCD_WrCmd
    120            LCD_WrCmd(0xda);//--set com pins hardware configuration
   \   00000086   0x20DA             MOVS     R0,#+218
   \   00000088   0x.... 0x....      BL       LCD_WrCmd
    121            LCD_WrCmd(0x12);
   \   0000008C   0x2012             MOVS     R0,#+18
   \   0000008E   0x.... 0x....      BL       LCD_WrCmd
    122            LCD_WrCmd(0xdb);//--set vcomh
   \   00000092   0x20DB             MOVS     R0,#+219
   \   00000094   0x.... 0x....      BL       LCD_WrCmd
    123            LCD_WrCmd(0x40);//Set VCOM Deselect Level
   \   00000098   0x2040             MOVS     R0,#+64
   \   0000009A   0x.... 0x....      BL       LCD_WrCmd
    124            LCD_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
   \   0000009E   0x2020             MOVS     R0,#+32
   \   000000A0   0x.... 0x....      BL       LCD_WrCmd
    125            LCD_WrCmd(0x02);//
   \   000000A4   0x2002             MOVS     R0,#+2
   \   000000A6   0x.... 0x....      BL       LCD_WrCmd
    126            LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
   \   000000AA   0x208D             MOVS     R0,#+141
   \   000000AC   0x.... 0x....      BL       LCD_WrCmd
    127            LCD_WrCmd(0x14);//--set(0x10) disable
   \   000000B0   0x2014             MOVS     R0,#+20
   \   000000B2   0x.... 0x....      BL       LCD_WrCmd
    128            LCD_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
   \   000000B6   0x20A4             MOVS     R0,#+164
   \   000000B8   0x.... 0x....      BL       LCD_WrCmd
    129            LCD_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
   \   000000BC   0x20A6             MOVS     R0,#+166
   \   000000BE   0x.... 0x....      BL       LCD_WrCmd
    130            LCD_WrCmd(0xaf);//--turn on oled panel
   \   000000C2   0x20AF             MOVS     R0,#+175
   \   000000C4   0x.... 0x....      BL       LCD_WrCmd
    131            LCD_Fill(0x00);  //初始清屏
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x.... 0x....      BL       LCD_Fill
    132            LCD_Set_Pos(0,0);  	
   \   000000CE   0x2100             MOVS     R1,#+0
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x.... 0x....      BL       LCD_Set_Pos
    133          }
   \   000000D6   0xBD01             POP      {R0,PC}          ;; return
    134          /******延时函数******/

   \                                 In section .text, align 2, keep-with-next
    135          void LCD_DLY_ms(word ms)
    136          {                         
   \                     LCD_DLY_ms: (+1)
   \   00000000   0xE007             B.N      ??LCD_DLY_ms_0
    137            word a;
    138            while(ms)
    139            {
    140              a=13350;
   \                     ??LCD_DLY_ms_1: (+1)
   \   00000002   0xF243 0x4126      MOVW     R1,#+13350
    141              while(a--);
   \                     ??LCD_DLY_ms_2: (+1)
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x1E51             SUBS     R1,R2,#+1
   \   0000000A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD1FA             BNE.N    ??LCD_DLY_ms_2
    142              ms--;
   \   00000010   0x1E40             SUBS     R0,R0,#+1
    143            }
   \                     ??LCD_DLY_ms_0: (+1)
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD1F4             BNE.N    ??LCD_DLY_ms_1
    144            return;
   \   00000018   0x4770             BX       LR               ;; return
    145          }

   \                                 In section .rodata, align 4
    146          const byte F16x16_Idx[] = 
   \                     F16x16_Idx:
   \   00000000   0xD6 0xC7          DC8 "\326\307\304\334\263\265\265\347\321\271\316\302\266\310"
   \              0xC4 0xDC    
   \              0xB3 0xB5    
   \              0xB5 0xE7    
   \              0xD1 0xB9    
   \              0xCE 0xC2    
   \              0xB6 0xC8    
   \              0x00         
   \   0000000F   0x00               DC8 0
    147          {
    148            "智能车电压温度"
    149          };
    150          //16x16,宋体，小四号

   \                                 In section .rodata, align 4
    151          const byte F16x16[]={
   \                     F16x16:
   \   00000000   0x14 0x13          DC8 20, 19, 146, 126, 50, 82, 146, 0, 124, 68, 68, 68, 124, 0, 1, 1, 0
   \              0x92 0x7E    
   \              0x32 0x52    
   \              0x92 0x00    
   \              0x7C 0x44    
   \              0x44 0x44    
   \              0x7C 0x00    
   \              0x01 0x01    
   \              0x00         
   \   00000011   0xFF 0x49          DC8 255, 73, 73, 73, 73, 73, 73, 255, 0, 0, 0, 184, 151, 146, 144, 148
   \              0x49 0x49    
   \              0x49 0x49    
   \              0x49 0xFF    
   \              0x00 0x00    
   \              0x00 0xB8    
   \              0x97 0x92    
   \              0x90 0x94    
   \   00000021   0xB8 0x10          DC8 184, 16, 0, 127, 72, 72, 68, 116, 32, 255, 10, 10, 74, 138, 127, 0
   \              0x00 0x7F    
   \              0x48 0x48    
   \              0x44 0x74    
   \              0x20 0xFF    
   \              0x0A 0x0A    
   \              0x4A 0x8A    
   \              0x7F 0x00    
   \   00000031   0x00 0x3F          DC8 0, 63, 68, 68, 66, 114, 32, 4, 132, 196, 164, 156, 135, 132, 244
   \              0x44 0x44    
   \              0x42 0x72    
   \              0x20 0x04    
   \              0x84 0xC4    
   \              0xA4 0x9C    
   \              0x87 0x84    
   \              0xF4         
   \   00000040   0x84 0x84          DC8 132, 132, 132, 132, 132, 0, 4, 4, 4, 4, 4, 4, 4, 255, 4, 4, 4, 4, 4
   \              0x84 0x84    
   \              0x84 0x00    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x04 0xFF    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x04         
   \   00000053   0x04 0x00          DC8 4, 0, 248, 72, 72, 72, 72, 255, 72, 72, 72, 72, 248, 0, 0, 0, 15, 4
   \              0xF8 0x48    
   \              0x48 0x48    
   \              0x48 0xFF    
   \              0x48 0x48    
   \              0x48 0x48    
   \              0xF8 0x00    
   \              0x00 0x00    
   \              0x0F 0x04    
   \   00000065   0x04 0x04          DC8 4, 4, 4, 63, 68, 68, 68, 68, 79, 64, 112, 0, 254, 2, 66, 66, 66, 66
   \              0x04 0x3F    
   \              0x44 0x44    
   \              0x44 0x44    
   \              0x4F 0x40    
   \              0x70 0x00    
   \              0xFE 0x02    
   \              0x42 0x42    
   \              0x42 0x42    
   \   00000077   0xFA 0x42          DC8 250, 66, 66, 66, 98, 66, 2, 24, 39, 32, 32, 32, 32, 32, 63, 32, 33
   \              0x42 0x42    
   \              0x62 0x42    
   \              0x02 0x18    
   \              0x27 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3F 0x20    
   \              0x21         
   \   00000088   0x2E 0x24          DC8 46, 36, 32, 32, 33, 134, 112, 0, 126, 74, 74, 74, 74, 74, 126, 0, 0
   \              0x20 0x20    
   \              0x21 0x86    
   \              0x70 0x00    
   \              0x7E 0x4A    
   \              0x4A 0x4A    
   \              0x4A 0x4A    
   \              0x7E 0x00    
   \              0x00         
   \   00000099   0x00 0xFE          DC8 0, 254, 1, 64, 127, 65, 65, 127, 65, 65, 127, 65, 65, 127, 64, 0
   \              0x01 0x40    
   \              0x7F 0x41    
   \              0x41 0x7F    
   \              0x41 0x41    
   \              0x7F 0x41    
   \              0x41 0x7F    
   \              0x40 0x00    
   \   000000A9   0xFC 0x04          DC8 252, 4, 36, 36, 252, 165, 166, 164, 252, 36, 36, 36, 4, 96, 31, 128
   \              0x24 0x24    
   \              0xFC 0xA5    
   \              0xA6 0xA4    
   \              0xFC 0x24    
   \              0x24 0x24    
   \              0x04 0x60    
   \              0x1F 0x80    
   \   000000B9   0x80 0x42          DC8 128, 66, 70, 42, 18, 18, 42, 38, 66, 192, 64
   \              0x46 0x2A    
   \              0x12 0x12    
   \              0x2A 0x26    
   \              0x42 0xC0    
   \              0x40         
    152            0x14,0x13,0x92,0x7E,0x32,0x52,0x92,0x00,0x7C,0x44,0x44,0x44,0x7C,0x00,
    153            0x01,0x01,0x00,0xFF,0x49,0x49,0x49,0x49,0x49,0x49,0xFF,0x00,0x00,0x00,//智
    154            0xB8,0x97,0x92,0x90,0x94,0xB8,0x10,0x00,0x7F,0x48,0x48,0x44,0x74,0x20,
    155            0xFF,0x0A,0x0A,0x4A,0x8A,0x7F,0x00,0x00,0x3F,0x44,0x44,0x42,0x72,0x20,//能
    156            0x04,0x84,0xC4,0xA4,0x9C,0x87,0x84,0xF4,0x84,0x84,0x84,0x84,0x84,0x00,
    157            0x04,0x04,0x04,0x04,0x04,0x04,0x04,0xFF,0x04,0x04,0x04,0x04,0x04,0x04,//车
    158            0x00,0xF8,0x48,0x48,0x48,0x48,0xFF,0x48,0x48,0x48,0x48,0xF8,0x00,0x00,
    159            0x00,0x0F,0x04,0x04,0x04,0x04,0x3F,0x44,0x44,0x44,0x44,0x4F,0x40,0x70,//电
    160            0x00,0xFE,0x02,0x42,0x42,0x42,0x42,0xFA,0x42,0x42,0x42,0x62,0x42,0x02,
    161            0x18,0x27,0x20,0x20,0x20,0x20,0x20,0x3F,0x20,0x21,0x2E,0x24,0x20,0x20,//压
    162            0x21,0x86,0x70,0x00,0x7E,0x4A,0x4A,0x4A,0x4A,0x4A,0x7E,0x00,0x00,0x00,
    163            0xFE,0x01,0x40,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x40,//温
    164            0x00,0xFC,0x04,0x24,0x24,0xFC,0xA5,0xA6,0xA4,0xFC,0x24,0x24,0x24,0x04,
    165            0x60,0x1F,0x80,0x80,0x42,0x46,0x2A,0x12,0x12,0x2A,0x26,0x42,0xC0,0x40,//度
    166          };
    167          //======================================

   \                                 In section .rodata, align 4
    168          const byte F6x8[][6] =
   \                     F6x8:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x2F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x07 0x00    
   \              0x07 0x00    
   \              0x00 0x14    
   \              0x7F         
   \   00000015   0x14 0x7F          DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
   \              0x14 0x00    
   \              0x24 0x2A    
   \              0x7F 0x2A    
   \              0x12 0x00    
   \              0x62 0x64    
   \              0x08 0x13    
   \              0x23 0x00    
   \              0x36         
   \   00000026   0x49 0x55          DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
   \              0x22 0x50    
   \              0x00 0x00    
   \              0x05 0x03    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1C 0x22    
   \              0x41 0x00    
   \              0x00 0x00    
   \              0x41 0x22    
   \   0000003A   0x1C 0x00          DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
   \              0x00 0x14    
   \              0x08 0x3E    
   \              0x08 0x14    
   \              0x00 0x08    
   \              0x08 0x3E    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x00 0xA0    
   \              0x60 0x00    
   \   0000004E   0x00 0x08          DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x60 0x60    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x10 0x08    
   \              0x04 0x02    
   \              0x00 0x3E    
   \              0x51         
   \   00000063   0x49 0x45          DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
   \              0x3E 0x00    
   \              0x00 0x42    
   \              0x7F 0x40    
   \              0x00 0x00    
   \              0x42 0x61    
   \              0x51 0x49    
   \              0x46 0x00    
   \              0x21 0x41    
   \   00000075   0x45 0x4B          DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
   \              0x31 0x00    
   \              0x18 0x14    
   \              0x12 0x7F    
   \              0x10 0x00    
   \              0x27 0x45    
   \              0x45 0x45    
   \              0x39 0x00    
   \              0x3C         
   \   00000086   0x4A 0x49          DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
   \              0x49 0x30    
   \              0x00 0x01    
   \              0x71 0x09    
   \              0x05 0x03    
   \              0x00 0x36    
   \              0x49 0x49    
   \              0x49 0x36    
   \              0x00 0x06    
   \              0x49         
   \   00000099   0x49 0x29          DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
   \              0x1E 0x00    
   \              0x00 0x36    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x00 0x56    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x08 0x14    
   \              0x22         
   \   000000AC   0x41 0x00          DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
   \              0x00 0x14    
   \              0x14 0x14    
   \              0x14 0x14    
   \              0x00 0x00    
   \              0x41 0x22    
   \              0x14 0x08    
   \              0x00 0x02    
   \              0x01 0x51    
   \              0x09         
   \   000000BF   0x06 0x00          DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
   \              0x32 0x49    
   \              0x59 0x51    
   \              0x3E 0x00    
   \              0x7C 0x12    
   \              0x11 0x12    
   \              0x7C 0x00    
   \              0x7F 0x49    
   \              0x49         
   \   000000D0   0x49 0x36          DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x22    
   \              0x00 0x7F    
   \              0x41 0x41    
   \              0x22 0x1C    
   \              0x00 0x7F    
   \              0x49         
   \   000000E1   0x49 0x49          DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
   \              0x41 0x00    
   \              0x7F 0x09    
   \              0x09 0x09    
   \              0x01 0x00    
   \              0x3E 0x41    
   \              0x49 0x49    
   \              0x7A 0x00    
   \              0x7F 0x08    
   \   000000F3   0x08 0x08          DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
   \              0x7F 0x00    
   \              0x00 0x41    
   \              0x7F 0x41    
   \              0x00 0x00    
   \              0x20 0x40    
   \              0x41 0x3F    
   \              0x01 0x00    
   \              0x7F 0x08    
   \   00000105   0x14 0x22          DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
   \              0x41 0x00    
   \              0x7F 0x40    
   \              0x40 0x40    
   \              0x40 0x00    
   \              0x7F 0x02    
   \              0x0C 0x02    
   \              0x7F 0x00    
   \              0x7F         
   \   00000116   0x04 0x08          DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
   \              0x10 0x7F    
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x3E    
   \              0x00 0x7F    
   \              0x09 0x09    
   \              0x09 0x06    
   \              0x00 0x3E    
   \              0x41         
   \   00000129   0x51 0x21          DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
   \              0x5E 0x00    
   \              0x7F 0x09    
   \              0x19 0x29    
   \              0x46 0x00    
   \              0x46 0x49    
   \              0x49 0x49    
   \              0x31 0x00    
   \              0x01 0x01    
   \   0000013B   0x7F 0x01          DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
   \              0x01 0x00    
   \              0x3F 0x40    
   \              0x40 0x40    
   \              0x3F 0x00    
   \              0x1F 0x20    
   \              0x40 0x20    
   \              0x1F 0x00    
   \              0x3F 0x40    
   \   0000014D   0x38 0x40          DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
   \              0x3F 0x00    
   \              0x63 0x14    
   \              0x08 0x14    
   \              0x63 0x00    
   \              0x07 0x08    
   \              0x70 0x08    
   \              0x07 0x00    
   \              0x61 0x51    
   \              0x49         
   \   00000160   0x45 0x43          DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
   \              0x00 0x00    
   \              0x7F 0x41    
   \              0x41 0x00    
   \              0x00 0x55    
   \              0x2A 0x55    
   \              0x2A 0x55    
   \              0x00 0x00    
   \              0x41 0x41    
   \   00000172   0x7F 0x00          DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
   \              0x00 0x04    
   \              0x02 0x01    
   \              0x02 0x04    
   \              0x00 0x40    
   \              0x40 0x40    
   \              0x40 0x40    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x04 0x00    
   \   00000186   0x00 0x20          DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
   \              0x54 0x54    
   \              0x54 0x78    
   \              0x00 0x7F    
   \              0x48 0x44    
   \              0x44 0x38    
   \              0x00 0x38    
   \              0x44 0x44    
   \              0x44         
   \   00000197   0x20 0x00          DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
   \              0x38 0x44    
   \              0x44 0x48    
   \              0x7F 0x00    
   \              0x38 0x54    
   \              0x54 0x54    
   \              0x18 0x00    
   \              0x08 0x7E    
   \              0x09 0x01    
   \   000001A9   0x02 0x00          DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
   \              0x18 0xA4    
   \              0xA4 0xA4    
   \              0x7C 0x00    
   \              0x7F 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x00 0x44    
   \              0x7D         
   \   000001BA   0x40 0x00          DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
   \              0x00 0x40    
   \              0x80 0x84    
   \              0x7D 0x00    
   \              0x00 0x7F    
   \              0x10 0x28    
   \              0x44 0x00    
   \              0x00 0x00    
   \              0x41         
   \   000001CB   0x7F 0x40          DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
   \              0x00 0x00    
   \              0x7C 0x04    
   \              0x18 0x04    
   \              0x78 0x00    
   \              0x7C 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x38 0x44    
   \   000001DD   0x44 0x44          DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
   \              0x38 0x00    
   \              0xFC 0x24    
   \              0x24 0x24    
   \              0x18 0x00    
   \              0x18 0x24    
   \              0x24 0x18    
   \              0xFC 0x00    
   \              0x7C         
   \   000001EE   0x08 0x04          DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
   \              0x04 0x08    
   \              0x00 0x48    
   \              0x54 0x54    
   \              0x54 0x20    
   \              0x00 0x04    
   \              0x3F 0x44    
   \              0x40 0x20    
   \              0x00 0x3C    
   \              0x40         
   \   00000201   0x40 0x20          DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
   \              0x7C 0x00    
   \              0x1C 0x20    
   \              0x40 0x20    
   \              0x1C 0x00    
   \              0x3C 0x40    
   \              0x30 0x40    
   \              0x3C 0x00    
   \              0x44         
   \   00000212   0x28 0x10          DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
   \              0x28 0x44    
   \              0x00 0x1C    
   \              0xA0 0xA0    
   \              0xA0 0x7C    
   \              0x00 0x44    
   \              0x64 0x54    
   \              0x4C 0x44    
   \   00000222   0x14 0x14          DC8 20, 20, 20, 20, 20, 20
   \              0x14 0x14    
   \              0x14 0x14    
    169          {
    170            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
    171            { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
    172            { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
    173            { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
    174            { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
    175            { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
    176            { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
    177            { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
    178            { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
    179            { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
    180            { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
    181            { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
    182            { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
    183            { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
    184            { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
    185            { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
    186            { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
    187            { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
    188            { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
    189            { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
    190            { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
    191            { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
    192            { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
    193            { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
    194            { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
    195            { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
    196            { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
    197            { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
    198            { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
    199            { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
    200            { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
    201            { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
    202            { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
    203            { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
    204            { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
    205            { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
    206            { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
    207            { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
    208            { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
    209            { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
    210            { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
    211            { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
    212            { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
    213            { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
    214            { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
    215            { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
    216            { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
    217            { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
    218            { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
    219            { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
    220            { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
    221            { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
    222            { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
    223            { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
    224            { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
    225            { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
    226            { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
    227            { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
    228            { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
    229            { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
    230            { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
    231            { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
    232            { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
    233            { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
    234            { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
    235            { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
    236            { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
    237            { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
    238            { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
    239            { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
    240            { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
    241            { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
    242            { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
    243            { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
    244            { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
    245            { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
    246            { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
    247            { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
    248            { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
    249            { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
    250            { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
    251            { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
    252            { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
    253            { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
    254            { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
    255            { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
    256            { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
    257            { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
    258            { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
    259            { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
    260            { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
    261            { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
    262          };
    263          //======================================================
    264          // 128X64I液晶底层驱动[8X16]字体库
    265          // 设计者: powerint
    266          // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
    267          // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
    268          //======================================================

   \                                 In section .rodata, align 4
    269          const byte F8X16[]=
   \                     F8X16:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xF8    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x33    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x0C 0x06    
   \              0x10 0x0C    
   \              0x06 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002B   0x00 0x00          DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
   \              0x00 0x00    
   \              0x00 0x40    
   \              0xC0 0x78    
   \              0x40 0xC0    
   \              0x78 0x40    
   \              0x00 0x04    
   \              0x3F 0x04    
   \              0x04 0x3F    
   \   0000003D   0x04 0x04          DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
   \              0x00 0x00    
   \              0x70 0x88    
   \              0xFC 0x08    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x18 0x20    
   \              0xFF 0x21    
   \              0x1E 0x00    
   \   0000004F   0x00 0xF0          DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
   \              0x08 0xF0    
   \              0x00 0xE0    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x21 0x1C    
   \              0x03 0x1E    
   \              0x21 0x1E    
   \              0x00 0x00    
   \   00000061   0xF0 0x08          DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
   \              0x88 0x70    
   \              0x00 0x00    
   \              0x00 0x1E    
   \              0x21 0x23    
   \              0x24 0x19    
   \              0x27 0x21    
   \              0x10 0x10    
   \              0x16         
   \   00000072   0x0E 0x00          DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE0    
   \              0x18 0x04    
   \              0x02         
   \   00000087   0x00 0x00          DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
   \              0x00 0x00    
   \              0x07 0x18    
   \              0x20 0x40    
   \              0x00 0x00    
   \              0x02 0x04    
   \              0x18 0xE0    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x40 0x20    
   \   0000009B   0x18 0x07          DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
   \              0x00 0x00    
   \              0x00 0x40    
   \              0x40 0x80    
   \              0xF0 0x80    
   \              0x40 0x40    
   \              0x00 0x02    
   \              0x02 0x01    
   \              0x0F 0x01    
   \              0x02         
   \   000000AE   0x02 0x00          DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0xF0    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x01    
   \              0x01 0x1F    
   \              0x01 0x01    
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C4   0x00 0x00          DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x80 0xB0    
   \              0x70 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000D9   0x01 0x01          DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x30 0x30    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000EF   0x00 0x00          DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x60 0x18    
   \              0x04 0x00    
   \              0x60 0x18    
   \              0x06 0x01    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xE0 0x10    
   \   00000103   0x08 0x08          DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
   \              0x10 0xE0    
   \              0x00 0x00    
   \              0x0F 0x10    
   \              0x20 0x20    
   \              0x10 0x0F    
   \              0x00 0x00    
   \              0x10 0x10    
   \              0xF8 0x00    
   \   00000115   0x00 0x00          DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
   \              0x00 0x00    
   \              0x20 0x20    
   \              0x3F 0x20    
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x70 0x08    
   \              0x08 0x08    
   \              0x88 0x70    
   \              0x00         
   \   00000128   0x00 0x30          DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
   \              0x28 0x24    
   \              0x22 0x21    
   \              0x30 0x00    
   \              0x00 0x30    
   \              0x08 0x88    
   \              0x88 0x48    
   \              0x30 0x00    
   \              0x00 0x18    
   \   0000013A   0x20 0x20          DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
   \              0x20 0x11    
   \              0x0E 0x00    
   \              0x00 0x00    
   \              0xC0 0x20    
   \              0x10 0xF8    
   \              0x00 0x00    
   \              0x00 0x07    
   \              0x04 0x24    
   \   0000014C   0x24 0x3F          DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
   \              0x24 0x00    
   \              0x00 0xF8    
   \              0x08 0x88    
   \              0x88 0x08    
   \              0x08 0x00    
   \              0x00 0x19    
   \              0x21 0x20    
   \              0x20 0x11    
   \   0000015E   0x0E 0x00          DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
   \              0x00 0xE0    
   \              0x10 0x88    
   \              0x88 0x18    
   \              0x00 0x00    
   \              0x00 0x0F    
   \              0x11 0x20    
   \              0x20 0x11    
   \              0x0E 0x00    
   \   00000170   0x00 0x38          DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
   \              0x08 0x08    
   \              0xC8 0x38    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x3F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x70    
   \              0x88 0x08    
   \   00000184   0x08 0x88          DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
   \              0x70 0x00    
   \              0x00 0x1C    
   \              0x22 0x21    
   \              0x21 0x22    
   \              0x1C 0x00    
   \              0x00 0xE0    
   \              0x10 0x08    
   \              0x08 0x10    
   \   00000196   0xE0 0x00          DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x31 0x22    
   \              0x22 0x11    
   \              0x0F 0x00    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0xC0 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001A9   0x00 0x00          DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
   \              0x30 0x30    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x60 0x00    
   \   000001BD   0x00 0x00          DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x40 0x20    
   \              0x10 0x08    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x04 0x08    
   \              0x10 0x20    
   \              0x00 0x40    
   \   000001D1   0x40 0x40          DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
   \              0x40 0x40    
   \              0x40 0x40    
   \              0x00 0x04    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x00 0x00    
   \              0x08 0x10    
   \              0x20 0x40    
   \   000001E5   0x80 0x00          DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
   \              0x00 0x00    
   \              0x20 0x10    
   \              0x08 0x04    
   \              0x02 0x01    
   \              0x00 0x00    
   \              0x70 0x48    
   \              0x08 0x08    
   \              0x08 0xF0    
   \              0x00 0x00    
   \   000001F9   0x00 0x00          DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
   \              0x30 0x36    
   \              0x01 0x00    
   \              0x00 0xC0    
   \              0x30 0xC8    
   \              0x28 0xE8    
   \              0x10 0xE0    
   \              0x00 0x07    
   \              0x18 0x27    
   \   0000020B   0x24 0x23          DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
   \              0x14 0x0B    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x38 0xE0    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x3C 0x23    
   \              0x02 0x02    
   \   0000021D   0x27 0x38          DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
   \              0x20 0x08    
   \              0xF8 0x88    
   \              0x88 0x88    
   \              0x70 0x00    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x20 0x20    
   \   0000022D   0x11 0x0E          DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
   \              0x00 0xC0    
   \              0x30 0x08    
   \              0x08 0x08    
   \              0x08 0x38    
   \              0x00 0x07    
   \              0x18 0x20    
   \              0x20 0x20    
   \              0x10 0x08    
   \              0x00         
   \   00000240   0x08 0xF8          DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
   \              0x08 0x08    
   \              0x08 0x10    
   \              0xE0 0x00    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x20 0x10    
   \              0x0F 0x00    
   \              0x08 0xF8    
   \   00000252   0x88 0x88          DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
   \              0xE8 0x08    
   \              0x10 0x00    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x23 0x20    
   \              0x18 0x00    
   \              0x08 0xF8    
   \              0x88         
   \   00000263   0x88 0xE8          DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
   \              0x08 0x10    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x00 0x03    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x30 0x08    
   \              0x08 0x08    
   \              0x38         
   \   00000276   0x00 0x00          DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
   \              0x07 0x18    
   \              0x20 0x20    
   \              0x22 0x1E    
   \              0x02 0x00    
   \              0x08 0xF8    
   \              0x08 0x00    
   \              0x00 0x08    
   \              0xF8 0x08    
   \              0x20         
   \   00000289   0x3F 0x21          DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
   \              0x01 0x01    
   \              0x21 0x3F    
   \              0x20 0x00    
   \              0x08 0x08    
   \              0xF8 0x08    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x20 0x20    
   \              0x3F         
   \   0000029C   0x20 0x20          DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x08    
   \              0xF8 0x08    
   \              0x08 0x00    
   \              0xC0 0x80    
   \              0x80 0x80    
   \              0x7F 0x00    
   \   000002AE   0x00 0x00          DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
   \              0x08 0xF8    
   \              0x88 0xC0    
   \              0x28 0x18    
   \              0x08 0x00    
   \              0x20 0x3F    
   \              0x20 0x01    
   \              0x26 0x38    
   \              0x20 0x00    
   \   000002C0   0x08 0xF8          DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x30 0x00    
   \              0x08 0xF8    
   \   000002D2   0xF8 0x00          DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
   \              0xF8 0xF8    
   \              0x08 0x00    
   \              0x20 0x3F    
   \              0x00 0x3F    
   \              0x00 0x3F    
   \              0x20 0x00    
   \              0x08 0xF8    
   \              0x30         
   \   000002E3   0xC0 0x00          DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
   \              0x08 0xF8    
   \              0x08 0x20    
   \              0x3F 0x20    
   \              0x00 0x07    
   \              0x18 0x3F    
   \              0x00 0xE0    
   \              0x10 0x08    
   \              0x08 0x08    
   \   000002F5   0x10 0xE0          DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
   \              0x00 0x0F    
   \              0x10 0x20    
   \              0x20 0x20    
   \              0x10 0x0F    
   \              0x00 0x08    
   \              0xF8 0x08    
   \              0x08 0x08    
   \              0x08 0xF0    
   \   00000307   0x00 0x20          DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
   \              0x3F 0x21    
   \              0x01 0x01    
   \              0x01 0x00    
   \              0x00 0xE0    
   \              0x10 0x08    
   \              0x08 0x08    
   \              0x10 0xE0    
   \              0x00 0x0F    
   \              0x18         
   \   0000031A   0x24 0x24          DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
   \              0x38 0x50    
   \              0x4F 0x00    
   \              0x08 0xF8    
   \              0x88 0x88    
   \              0x88 0x88    
   \              0x70 0x00    
   \              0x20 0x3F    
   \   0000032A   0x20 0x00          DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
   \              0x03 0x0C    
   \              0x30 0x20    
   \              0x00 0x70    
   \              0x88 0x08    
   \              0x08 0x08    
   \              0x38 0x00    
   \              0x00 0x38    
   \              0x20 0x21    
   \   0000033C   0x21 0x22          DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
   \              0x1C 0x00    
   \              0x18 0x08    
   \              0x08 0xF8    
   \              0x08 0x08    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x20 0x3F    
   \              0x20 0x00    
   \              0x00         
   \   0000034F   0x00 0x08          DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
   \              0xF8 0x08    
   \              0x00 0x00    
   \              0x08 0xF8    
   \              0x08 0x00    
   \              0x1F 0x20    
   \              0x20 0x20    
   \              0x20 0x1F    
   \              0x00 0x08    
   \              0x78         
   \   00000362   0x88 0x00          DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
   \              0x00 0xC8    
   \              0x38 0x08    
   \              0x00 0x00    
   \              0x07 0x38    
   \              0x0E 0x01    
   \              0x00 0x00    
   \              0xF8 0x08    
   \              0x00 0xF8    
   \              0x00         
   \   00000375   0x08 0xF8          DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
   \              0x00 0x03    
   \              0x3C 0x07    
   \              0x00 0x07    
   \              0x3C 0x03    
   \              0x00 0x08    
   \              0x18 0x68    
   \              0x80 0x80    
   \              0x68 0x18    
   \   00000387   0x08 0x20          DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
   \              0x30 0x2C    
   \              0x03 0x03    
   \              0x2C 0x30    
   \              0x20 0x08    
   \              0x38 0xC8    
   \              0x00 0xC8    
   \              0x38 0x08    
   \              0x00 0x00    
   \              0x00         
   \   0000039A   0x20 0x3F          DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x10 0x08    
   \              0x08 0x08    
   \              0xC8 0x38    
   \              0x08 0x00    
   \              0x20 0x38    
   \              0x26 0x21    
   \              0x20         
   \   000003AD   0x20 0x18          DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xFE 0x02    
   \              0x02 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7F 0x40    
   \              0x40 0x40    
   \              0x00 0x00    
   \   000003C1   0x0C 0x30          DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
   \              0xC0 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x06    
   \              0x38 0xC0    
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x02 0xFE    
   \   000003D5   0x00 0x00          DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
   \              0x00 0x00    
   \              0x40 0x40    
   \              0x40 0x7F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x04    
   \              0x02 0x02    
   \              0x02 0x04    
   \              0x00 0x00    
   \              0x00         
   \   000003EA   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x80         
   \   000003FD   0x80 0x80          DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x80 0x00    
   \              0x02 0x02    
   \              0x04 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000412   0x80 0x80          DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x19    
   \              0x24 0x22    
   \              0x22 0x22    
   \              0x3F 0x20    
   \              0x08 0xF8    
   \              0x00         
   \   00000423   0x80 0x80          DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3F 0x11    
   \              0x20 0x20    
   \              0x11 0x0E    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x80    
   \   00000435   0x80 0x00          DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
   \              0x00 0x00    
   \              0x0E 0x11    
   \              0x20 0x20    
   \              0x20 0x11    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x88         
   \   00000446   0xF8 0x00          DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
   \              0x00 0x0E    
   \              0x11 0x20    
   \              0x20 0x10    
   \              0x3F 0x20    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00         
   \   00000457   0x00 0x00          DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
   \              0x1F 0x22    
   \              0x22 0x22    
   \              0x22 0x13    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0xF0 0x88    
   \              0x88 0x88    
   \   00000467   0x18 0x00          DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
   \              0x20 0x20    
   \              0x3F 0x20    
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00         
   \   00000478   0x00 0x6B          DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
   \              0x94 0x94    
   \              0x94 0x93    
   \              0x60 0x00    
   \              0x08 0xF8    
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x00 0x00    
   \   00000488   0x20 0x3F          DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
   \              0x21 0x00    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x00 0x80    
   \              0x98 0x98    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x20    
   \   0000049A   0x20 0x3F          DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
   \              0x20 0x20    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x98 0x98    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x80         
   \   000004AB   0x80 0x80          DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
   \              0x7F 0x00    
   \              0x00 0x08    
   \              0xF8 0x00    
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x00 0x20    
   \              0x3F 0x24    
   \              0x02         
   \   000004BC   0x2D 0x30          DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
   \              0x20 0x00    
   \              0x00 0x08    
   \              0x08 0xF8    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x00         
   \   000004CF   0x00 0x80          DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x00 0x3F    
   \              0x20 0x00    
   \   000004DF   0x3F 0x80          DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
   \              0x80 0x00    
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x20    
   \              0x3F 0x21    
   \              0x00 0x00    
   \              0x20 0x3F    
   \              0x20         
   \   000004F0   0x00 0x00          DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x1F    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x1F 0x00    
   \              0x80         
   \   00000501   0x80 0x00          DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0xFF 0xA1    
   \              0x20 0x20    
   \              0x11 0x0E    
   \              0x00 0x00    
   \              0x00         
   \   00000512   0x00 0x80          DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x0E    
   \              0x11 0x20    
   \              0x20 0xA0    
   \              0xFF 0x80    
   \              0x80         
   \   00000521   0x80 0x80          DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x00 0x20    
   \              0x20 0x3F    
   \              0x21 0x20    
   \              0x00 0x01    
   \              0x00 0x00    
   \              0x00         
   \   00000532   0x80 0x80          DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x33    
   \              0x24 0x24    
   \              0x24 0x24    
   \              0x19 0x00    
   \              0x00 0x80    
   \   00000542   0x80 0xE0          DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x1F    
   \              0x20 0x20    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x00 0x00    
   \   00000554   0x00 0x80          DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
   \              0x80 0x00    
   \              0x00 0x1F    
   \              0x20 0x20    
   \              0x20 0x10    
   \              0x3F 0x20    
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00         
   \   00000565   0x80 0x80          DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
   \              0x80 0x00    
   \              0x01 0x0E    
   \              0x30 0x08    
   \              0x06 0x01    
   \              0x00 0x80    
   \              0x80 0x00    
   \              0x80 0x00    
   \              0x80         
   \   00000576   0x80 0x80          DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
   \              0x0F 0x30    
   \              0x0C 0x03    
   \              0x0C 0x30    
   \              0x0F 0x00    
   \              0x00 0x80    
   \              0x80 0x00    
   \              0x80 0x80    
   \   00000586   0x80 0x00          DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
   \              0x00 0x20    
   \              0x31 0x2E    
   \              0x0E 0x31    
   \              0x20 0x00    
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x80    
   \              0x80         
   \   00000597   0x80 0x80          DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
   \              0x81 0x8E    
   \              0x70 0x18    
   \              0x06 0x01    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x80         
   \   000005A6   0x80 0x00          DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
   \              0x00 0x21    
   \              0x30 0x2C    
   \              0x22 0x21    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x7C    
   \              0x02 0x02    
   \              0x00         
   \   000005B9   0x00 0x00          DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
   \              0x00 0x00    
   \              0x3F 0x40    
   \              0x40 0x00    
   \              0x00 0x00    
   \              0x00 0xFF    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xFF    
   \   000005CD   0x00 0x00          DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x7C 0x80    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x40 0x40    
   \              0x3F 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005E1   0x06 0x01          DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x02    
   \              0x02 0x04    
   \              0x04 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    270          {
    271            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
    272            0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
    273            0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
    274            0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
    275            0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
    276            0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
    277            0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
    278            0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
    279            0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
    280            0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
    281            0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
    282            0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
    283            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
    284            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
    285            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
    286            0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
    287            0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
    288            0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
    289            0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
    290            0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
    291            0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
    292            0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
    293            0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
    294            0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
    295            0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
    296            0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
    297            0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
    298            0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
    299            0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
    300            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
    301            0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
    302            0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
    303            0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
    304            0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
    305            0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
    306            0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
    307            0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
    308            0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
    309            0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
    310            0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
    311            0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
    312            0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
    313            0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
    314            0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
    315            0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
    316            0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
    317            0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
    318            0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
    319            0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
    320            0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
    321            0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
    322            0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
    323            0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
    324            0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
    325            0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
    326            0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
    327            0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
    328            0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
    329            0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
    330            0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
    331            0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
    332            0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
    333            0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
    334            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
    335            0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
    336            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
    337            0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
    338            0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
    339            0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
    340            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
    341            0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
    342            0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
    343            0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
    344            0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
    345            0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
    346            0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
    347            0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
    348            0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
    349            0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
    350            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
    351            0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
    352            0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
    353            0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
    354            0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
    355            0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
    356            0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
    357            0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
    358            0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
    359            0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
    360            0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
    361            0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
    362            0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
    363            0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
    364            0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
    365            0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
    366            
    367          };

   \                                 In section .text, align 4, keep-with-next
    368          void LCD_WrDat(byte data)
    369          {
    370            byte i=8;
   \                     LCD_WrDat: (+1)
   \   00000000   0x2108             MOVS     R1,#+8
    371            PTA12_O=1;
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable10_10  ;; 0x43fe0030
   \   00000008   0x601A             STR      R2,[R3, #+0]
    372            asm("nop"); 
   \   0000000A   0xBF00             nop
    373            PTA15_O=0;
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable10_8  ;; 0x43fe003c
   \   00000012   0x601A             STR      R2,[R3, #+0]
    374            asm("nop");    
   \   00000014   0xBF00             nop
   \   00000016   0xE00D             B.N      ??LCD_WrDat_0
    375            while(i--)
    376            {
    377              if(data&0x80){PTA16_O=1;}
    378              else{PTA16_O=0;}
   \                     ??LCD_WrDat_1: (+1)
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x.... 0x....      LDR.W    R3,??DataTable10_11  ;; 0x43fe0040
   \   0000001E   0x601A             STR      R2,[R3, #+0]
    379              PTA15_O=1;
   \                     ??LCD_WrDat_2: (+1)
   \   00000020   0x2201             MOVS     R2,#+1
   \   00000022   0x.... 0x....      LDR.W    R3,??DataTable10_8  ;; 0x43fe003c
   \   00000026   0x601A             STR      R2,[R3, #+0]
    380              asm("nop");;;;          
   \   00000028   0xBF00             nop
    381              PTA15_O=0;
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x.... 0x....      LDR.W    R3,??DataTable10_8  ;; 0x43fe003c
   \   00000030   0x601A             STR      R2,[R3, #+0]
    382              data<<=1;    
   \   00000032   0x0040             LSLS     R0,R0,#+1
   \                     ??LCD_WrDat_0: (+1)
   \   00000034   0x000A             MOVS     R2,R1
   \   00000036   0x1E51             SUBS     R1,R2,#+1
   \   00000038   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003A   0x2A00             CMP      R2,#+0
   \   0000003C   0xD006             BEQ.N    ??LCD_WrDat_3
   \   0000003E   0x0602             LSLS     R2,R0,#+24
   \   00000040   0xD5EA             BPL.N    ??LCD_WrDat_1
   \   00000042   0x2201             MOVS     R2,#+1
   \   00000044   0x.... 0x....      LDR.W    R3,??DataTable10_11  ;; 0x43fe0040
   \   00000048   0x601A             STR      R2,[R3, #+0]
   \   0000004A   0xE7E9             B.N      ??LCD_WrDat_2
    383            }
    384            
    385          }
   \                     ??LCD_WrDat_3: (+1)
   \   0000004C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
    386          void LCD_WrCmd(byte cmd)
    387          {
    388            byte i=8;
   \                     LCD_WrCmd: (+1)
   \   00000000   0x2108             MOVS     R1,#+8
    389            PTA12_O=0;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable10_10  ;; 0x43fe0030
   \   00000008   0x601A             STR      R2,[R3, #+0]
    390            PTA15_O=0; 
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable10_8  ;; 0x43fe003c
   \   00000010   0x601A             STR      R2,[R3, #+0]
   \   00000012   0xE00D             B.N      ??LCD_WrCmd_0
    391            while(i--)
    392            {
    393              if(cmd&0x80){PTA16_O=1;}
    394              else{PTA16_O=0;}
   \                     ??LCD_WrCmd_1: (+1)
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x.... 0x....      LDR.W    R3,??DataTable10_11  ;; 0x43fe0040
   \   0000001A   0x601A             STR      R2,[R3, #+0]
    395              PTA15_O=1;
   \                     ??LCD_WrCmd_2: (+1)
   \   0000001C   0x2201             MOVS     R2,#+1
   \   0000001E   0x.... 0x....      LDR.W    R3,??DataTable10_8  ;; 0x43fe003c
   \   00000022   0x601A             STR      R2,[R3, #+0]
    396              asm("nop");;;;            
   \   00000024   0xBF00             nop
    397              PTA15_O=0; 
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x.... 0x....      LDR.W    R3,??DataTable10_8  ;; 0x43fe003c
   \   0000002C   0x601A             STR      R2,[R3, #+0]
    398              cmd<<=1;;;;;   
   \   0000002E   0x0040             LSLS     R0,R0,#+1
   \                     ??LCD_WrCmd_0: (+1)
   \   00000030   0x000A             MOVS     R2,R1
   \   00000032   0x1E51             SUBS     R1,R2,#+1
   \   00000034   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000036   0x2A00             CMP      R2,#+0
   \   00000038   0xD006             BEQ.N    ??LCD_WrCmd_3
   \   0000003A   0x0602             LSLS     R2,R0,#+24
   \   0000003C   0xD5EA             BPL.N    ??LCD_WrCmd_1
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0x.... 0x....      LDR.W    R3,??DataTable10_11  ;; 0x43fe0040
   \   00000044   0x601A             STR      R2,[R3, #+0]
   \   00000046   0xE7E9             B.N      ??LCD_WrCmd_2
    399            } 	
    400            
    401          }
   \                     ??LCD_WrCmd_3: (+1)
   \   00000048   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    402          void LCD_Set_Pos(byte x, byte y)
    403          { 
   \                     LCD_Set_Pos: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    404            LCD_WrCmd(0xb0+y);
   \   00000004   0xF1B1 0x0050      SUBS     R0,R1,#+80
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       LCD_WrCmd
    405            LCD_WrCmd(((x&0xf0)>>4)|0x10);
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x0920             LSRS     R0,R4,#+4
   \   00000012   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LCD_WrCmd
    406            LCD_WrCmd((x&0x0f)|0x01); 
   \   0000001C   0xF014 0x000F      ANDS     R0,R4,#0xF
   \   00000020   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       LCD_WrCmd
    407          } 
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    408          void LCD_Fill(byte bmp_data)
    409          {
   \                     LCD_Fill: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    410            byte y,x;
    411            
    412            for(y=0;y<8;y++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE008             B.N      ??LCD_Fill_0
    413            {
    414              LCD_WrCmd(0xb0+y);
    415              LCD_WrCmd(0x01);
    416              LCD_WrCmd(0x10);
    417              for(x=0;x<X_WIDTH;x++)
    418                LCD_WrDat(bmp_data);
   \                     ??LCD_Fill_1: (+1)
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       LCD_WrDat
   \   00000010   0x1C76             ADDS     R6,R6,#+1
   \                     ??LCD_Fill_2: (+1)
   \   00000012   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000014   0x2E80             CMP      R6,#+128
   \   00000016   0xDBF7             BLT.N    ??LCD_Fill_1
   \   00000018   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_Fill_0: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D08             CMP      R5,#+8
   \   0000001E   0xDA0C             BGE.N    ??LCD_Fill_3
   \   00000020   0xF1B5 0x0050      SUBS     R0,R5,#+80
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       LCD_WrCmd
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       LCD_WrCmd
   \   00000030   0x2010             MOVS     R0,#+16
   \   00000032   0x.... 0x....      BL       LCD_WrCmd
   \   00000036   0x2600             MOVS     R6,#+0
   \   00000038   0xE7EB             B.N      ??LCD_Fill_2
    419            }
    420          }
   \                     ??LCD_Fill_3: (+1)
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    421          void LCD_CLS(void)
    422          {
   \                     LCD_CLS: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    423            byte y,x;	
    424            for(y=0;y<8;y++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE007             B.N      ??LCD_CLS_0
    425            {
    426              LCD_WrCmd(0xb0+y);
    427              LCD_WrCmd(0x01);
    428              LCD_WrCmd(0x10); 
    429              for(x=0;x<X_WIDTH;x++)
    430                LCD_WrDat(0);
   \                     ??LCD_CLS_1: (+1)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       LCD_WrDat
   \   0000000C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_CLS_2: (+1)
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x2D80             CMP      R5,#+128
   \   00000012   0xDBF8             BLT.N    ??LCD_CLS_1
   \   00000014   0x1C64             ADDS     R4,R4,#+1
   \                     ??LCD_CLS_0: (+1)
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C08             CMP      R4,#+8
   \   0000001A   0xDA0C             BGE.N    ??LCD_CLS_3
   \   0000001C   0xF1B4 0x0050      SUBS     R0,R4,#+80
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       LCD_WrCmd
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       LCD_WrCmd
   \   0000002C   0x2010             MOVS     R0,#+16
   \   0000002E   0x.... 0x....      BL       LCD_WrCmd
   \   00000032   0x2500             MOVS     R5,#+0
   \   00000034   0xE7EB             B.N      ??LCD_CLS_2
    431            }
    432          }
   \                     ??LCD_CLS_3: (+1)
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    433          //==============================================================
    434          //函数名： void LCD_PutPixel(byte x,byte y)
    435          //功能描述：绘制一个点（x,y）
    436          //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
    437          //返回：无
    438          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    439          void LCD_PutPixel(byte x,byte y)
    440          {
   \                     LCD_PutPixel: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    441            byte data1;  //data1当前点的数据  
    442            LCD_Set_Pos(x,y); 
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LCD_Set_Pos
    443            data1 = 0x01<<(y%8); 	
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x2108             MOVS     R1,#+8
   \   00000018   0xFB95 0xF2F1      SDIV     R2,R5,R1
   \   0000001C   0xFB02 0x5211      MLS      R2,R2,R1,R5
   \   00000020   0xFA10 0xF602      LSLS     R6,R0,R2
    444            LCD_WrCmd(0xb0+(y>>3));
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x08E8             LSRS     R0,R5,#+3
   \   00000028   0x3850             SUBS     R0,R0,#+80
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       LCD_WrCmd
    445            LCD_WrCmd(((x&0xf0)>>4)|0x10);
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x0920             LSRS     R0,R4,#+4
   \   00000034   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x.... 0x....      BL       LCD_WrCmd
    446            LCD_WrCmd((x&0x0f)|0x00);
   \   0000003E   0xF014 0x000F      ANDS     R0,R4,#0xF
   \   00000042   0x.... 0x....      BL       LCD_WrCmd
    447            LCD_WrDat(data1); 	 	
   \   00000046   0x0030             MOVS     R0,R6
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x.... 0x....      BL       LCD_WrDat
    448          }
   \   0000004E   0xBD70             POP      {R4-R6,PC}       ;; return
    449          //==============================================================
    450          //函数名： void LCD_Rectangle(byte x1,byte y1,
    451          //                   byte x2,byte y2,byte color,byte gif)
    452          //功能描述：绘制一个实心矩形
    453          //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
    454          //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
    455          //返回：无
    456          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    457          void LCD_Rectangle(byte x1,byte y1,byte x2,byte y2,byte gif)
    458          {
   \                     LCD_Rectangle: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x4698             MOV      R8,R3
    459            byte n; 	
    460            LCD_Set_Pos(x1,y1>>3);
   \   0000000C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000E   0x08F1             LSRS     R1,R6,#+3
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       LCD_Set_Pos
    461            for(n=x1;n<=x2;n++)
   \   00000018   0x46A9             MOV      R9,R5
   \   0000001A   0x9C08             LDR      R4,[SP, #+32]
   \   0000001C   0xE012             B.N      ??LCD_Rectangle_0
    462            {
    463              LCD_WrDat(0x01<<(y1%8)); 			
   \                     ??LCD_Rectangle_1: (+1)
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   0x2108             MOVS     R1,#+8
   \   00000024   0xFB96 0xF2F1      SDIV     R2,R6,R1
   \   00000028   0xFB02 0x6211      MLS      R2,R2,R1,R6
   \   0000002C   0x4090             LSLS     R0,R0,R2
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x.... 0x....      BL       LCD_WrDat
    464              if(gif == 1) LCD_DLY_ms(50);
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C01             CMP      R4,#+1
   \   00000038   0xD102             BNE.N    ??LCD_Rectangle_2
   \   0000003A   0x2032             MOVS     R0,#+50
   \   0000003C   0x.... 0x....      BL       LCD_DLY_ms
    465            }  
   \                     ??LCD_Rectangle_2: (+1)
   \   00000040   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_Rectangle_0: (+1)
   \   00000044   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000046   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004A   0x454F             CMP      R7,R9
   \   0000004C   0xD2E7             BCS.N    ??LCD_Rectangle_1
    466            LCD_Set_Pos(x1,y2>>3);
   \   0000004E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000052   0xEA5F 0x01D8      LSRS     R1,R8,#+3
   \   00000056   0x0028             MOVS     R0,R5
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x.... 0x....      BL       LCD_Set_Pos
    467            for(n=x1;n<=x2;n++)
   \   0000005E   0x46A9             MOV      R9,R5
   \   00000060   0xE013             B.N      ??LCD_Rectangle_3
    468            {
    469              LCD_WrDat(0x01<<(y2%8)); 			
   \                     ??LCD_Rectangle_4: (+1)
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000068   0x2108             MOVS     R1,#+8
   \   0000006A   0xFB98 0xF2F1      SDIV     R2,R8,R1
   \   0000006E   0xFB02 0x8211      MLS      R2,R2,R1,R8
   \   00000072   0x4090             LSLS     R0,R0,R2
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0x.... 0x....      BL       LCD_WrDat
    470              if(gif == 1) LCD_DLY_ms(5);
   \   0000007A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007C   0x2C01             CMP      R4,#+1
   \   0000007E   0xD102             BNE.N    ??LCD_Rectangle_5
   \   00000080   0x2005             MOVS     R0,#+5
   \   00000082   0x.... 0x....      BL       LCD_DLY_ms
    471            }
   \                     ??LCD_Rectangle_5: (+1)
   \   00000086   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_Rectangle_3: (+1)
   \   0000008A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000008C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000090   0x454F             CMP      R7,R9
   \   00000092   0xD2E6             BCS.N    ??LCD_Rectangle_4
    472            
    473          }  
   \   00000094   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    474          //==============================================================
    475          //函数名：LCD_P6x8Str(byte x,byte y,byte *p)
    476          //功能描述：写入一组标准ASCII字符串
    477          //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
    478          //返回：无
    479          //==============================================================  

   \                                 In section .text, align 2, keep-with-next
    480          void LCD_P6x8char(byte x,byte y,byte ch)
    481          {
   \                     LCD_P6x8char: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    482            byte c=0,i=0;      
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2500             MOVS     R5,#+0
    483               
    484              c =ch-32;
   \   00000006   0x3A20             SUBS     R2,R2,#+32
   \   00000008   0x0014             MOVS     R4,R2
    485              if(x>126){x=0;y++;}
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x287F             CMP      R0,#+127
   \   0000000E   0xDB01             BLT.N    ??LCD_P6x8char_0
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x1C49             ADDS     R1,R1,#+1
    486              LCD_Set_Pos(x,y);    
   \                     ??LCD_P6x8char_0: (+1)
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LCD_Set_Pos
    487            	for(i=0;i<6;i++)     
   \   0000001C   0x2500             MOVS     R5,#+0
   \   0000001E   0xE00A             B.N      ??LCD_P6x8char_1
    488            	  LCD_WrDat(F6x8[c][i]);  
   \                     ??LCD_P6x8char_2: (+1)
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2106             MOVS     R1,#+6
   \   00000028   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x5C28             LDRB     R0,[R5, R0]
   \   00000030   0x.... 0x....      BL       LCD_WrDat
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_P6x8char_1: (+1)
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x2D06             CMP      R5,#+6
   \   0000003A   0xDBF1             BLT.N    ??LCD_P6x8char_2
    489          }
   \   0000003C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    490          void LCD_P6x8Str(byte x,byte y,byte ch[])
    491          {
   \                     LCD_P6x8Str: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    492            byte c=0,i=0,j=0;      
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
   \   00000014   0xE015             B.N      ??LCD_P6x8Str_0
    493            while (ch[j]!='\0')
    494            {    
    495              c =ch[j]-32;
    496              if(x>126){x=0;y++;}
    497              LCD_Set_Pos(x,y);    
    498              for(i=0;i<6;i++)     
    499                LCD_WrDat(F6x8[c][i]);  
   \                     ??LCD_P6x8Str_1: (+1)
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   0000001A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001C   0x2106             MOVS     R1,#+6
   \   0000001E   0xFB01 0x0007      MLA      R0,R1,R7,R0
   \   00000022   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000026   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   0000002A   0x.... 0x....      BL       LCD_WrDat
   \   0000002E   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_P6x8Str_2: (+1)
   \   00000032   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000036   0xF1B8 0x0F06      CMP      R8,#+6
   \   0000003A   0xDBEC             BLT.N    ??LCD_P6x8Str_1
    500              x+=6;
   \   0000003C   0x1DA4             ADDS     R4,R4,#+6
    501              j++;
   \   0000003E   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_P6x8Str_0: (+1)
   \   00000042   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000046   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD013             BEQ.N    ??LCD_P6x8Str_3
   \   0000004E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000052   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   00000056   0xF1B0 0x0720      SUBS     R7,R0,#+32
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0x2C7F             CMP      R4,#+127
   \   0000005E   0xDB01             BLT.N    ??LCD_P6x8Str_4
   \   00000060   0x2400             MOVS     R4,#+0
   \   00000062   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_P6x8Str_4: (+1)
   \   00000064   0x0029             MOVS     R1,R5
   \   00000066   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000068   0x0020             MOVS     R0,R4
   \   0000006A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   0x.... 0x....      BL       LCD_Set_Pos
   \   00000070   0xF05F 0x0800      MOVS     R8,#+0
   \   00000074   0xE7DD             B.N      ??LCD_P6x8Str_2
    502            }
    503          }
   \                     ??LCD_P6x8Str_3: (+1)
   \   00000076   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    504          void LCD_P6x8s(byte x,byte y,int32 number)
    505          {
   \                     LCD_P6x8s: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000C             MOVS     R4,R1
   \   0000000A   0x0011             MOVS     R1,R2
    506            byte c=0,i=0,j=0;
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
   \   00000012   0x2600             MOVS     R6,#+0
    507            uint8 string[10];
    508            Num2Str(string,number);
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x.... 0x....      BL       Num2Str
   \   0000001A   0xE013             B.N      ??LCD_P6x8s_0
    509            while(string[j]!='\0')
    510            {
    511              c = string[j] - 32;
    512              if(x>126)
    513              {
    514                x=0;y++;
    515              }
    516              LCD_Set_Pos(x,y);
    517              for(i=0;i<6;i++)
    518              {
    519                LCD_WrDat(F6x8[c][i]);
   \                     ??LCD_P6x8s_1: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable10_12
   \   0000001E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000020   0x2106             MOVS     R1,#+6
   \   00000022   0xFB01 0x0007      MLA      R0,R1,R7,R0
   \   00000026   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000002A   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   0000002E   0x.... 0x....      BL       LCD_WrDat
    520              }
   \   00000032   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_P6x8s_2: (+1)
   \   00000036   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000003A   0xF1B8 0x0F06      CMP      R8,#+6
   \   0000003E   0xDBED             BLT.N    ??LCD_P6x8s_1
    521              x += 6;
   \   00000040   0x1DAD             ADDS     R5,R5,#+6
    522              j++;
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \                     ??LCD_P6x8s_0: (+1)
   \   00000044   0xA800             ADD      R0,SP,#+0
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x5C30             LDRB     R0,[R6, R0]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD012             BEQ.N    ??LCD_P6x8s_3
   \   0000004E   0xA800             ADD      R0,SP,#+0
   \   00000050   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000052   0x5C30             LDRB     R0,[R6, R0]
   \   00000054   0xF1B0 0x0720      SUBS     R7,R0,#+32
   \   00000058   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005A   0x2D7F             CMP      R5,#+127
   \   0000005C   0xDB01             BLT.N    ??LCD_P6x8s_4
   \   0000005E   0x2500             MOVS     R5,#+0
   \   00000060   0x1C64             ADDS     R4,R4,#+1
   \                     ??LCD_P6x8s_4: (+1)
   \   00000062   0x0021             MOVS     R1,R4
   \   00000064   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000066   0x0028             MOVS     R0,R5
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0x.... 0x....      BL       LCD_Set_Pos
   \   0000006E   0xF05F 0x0800      MOVS     R8,#+0
   \   00000072   0xE7E0             B.N      ??LCD_P6x8s_2
    523            }
    524          }
   \                     ??LCD_P6x8s_3: (+1)
   \   00000074   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    525          void LCD_P8x16s(byte x,byte y,int32 number)
    526          {
   \                     LCD_P8x16s: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0011             MOVS     R1,R2
    527            byte c=0,i=0,j=0;
   \   0000000A   0x2600             MOVS     R6,#+0
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
    528            static uint8 string[10];
    529            Num2Str(string,number);
   \   00000012   0x....             LDR.N    R0,??DataTable10_13
   \   00000014   0x.... 0x....      BL       Num2Str
   \   00000018   0xE00F             B.N      ??LCD_P8x16s_0
    530            while(string[j]!='\0')
    531            {
    532              c = string[j] - 32;
    533              if(x>120)
    534              {
    535                x=0;y++;
    536              }
    537              LCD_Set_Pos(x,y);    
    538              for(i=0;i<8;i++)     
    539              {
    540                LCD_WrDat(F8X16[c*16+i]);
    541              }
    542              LCD_Set_Pos(x,y+1);    
    543              for(i=0;i<8;i++)     
    544              {
    545                LCD_WrDat(F8X16[c*16+i+8]); 
   \                     ??LCD_P8x16s_1: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable10_14
   \   0000001C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001E   0x0131             LSLS     R1,R6,#+4
   \   00000020   0xFA51 0xF187      UXTAB    R1,R1,R7
   \   00000024   0x1808             ADDS     R0,R1,R0
   \   00000026   0x7A00             LDRB     R0,[R0, #+8]
   \   00000028   0x.... 0x....      BL       LCD_WrDat
    546              } 
   \   0000002C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_P8x16s_2: (+1)
   \   0000002E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000030   0x2F08             CMP      R7,#+8
   \   00000032   0xDBF2             BLT.N    ??LCD_P8x16s_1
    547              x+=8;
   \   00000034   0x3408             ADDS     R4,R4,#+8
    548              j++;
   \   00000036   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_P8x16s_0: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable10_13
   \   0000003C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000040   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD027             BEQ.N    ??LCD_P8x16s_3
   \   00000048   0x....             LDR.N    R0,??DataTable10_13
   \   0000004A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004E   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   00000052   0xF1B0 0x0620      SUBS     R6,R0,#+32
   \   00000056   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000058   0x2C79             CMP      R4,#+121
   \   0000005A   0xDB01             BLT.N    ??LCD_P8x16s_4
   \   0000005C   0x2400             MOVS     R4,#+0
   \   0000005E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_P8x16s_4: (+1)
   \   00000060   0x0029             MOVS     R1,R5
   \   00000062   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0x.... 0x....      BL       LCD_Set_Pos
   \   0000006C   0x2700             MOVS     R7,#+0
   \   0000006E   0xE008             B.N      ??LCD_P8x16s_5
   \                     ??LCD_P8x16s_6: (+1)
   \   00000070   0x....             LDR.N    R0,??DataTable10_14
   \   00000072   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000074   0x0131             LSLS     R1,R6,#+4
   \   00000076   0xFA51 0xF187      UXTAB    R1,R1,R7
   \   0000007A   0x5C08             LDRB     R0,[R1, R0]
   \   0000007C   0x.... 0x....      BL       LCD_WrDat
   \   00000080   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_P8x16s_5: (+1)
   \   00000082   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000084   0x2F08             CMP      R7,#+8
   \   00000086   0xDBF3             BLT.N    ??LCD_P8x16s_6
   \   00000088   0x1C69             ADDS     R1,R5,#+1
   \   0000008A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0x.... 0x....      BL       LCD_Set_Pos
   \   00000094   0x2700             MOVS     R7,#+0
   \   00000096   0xE7CA             B.N      ??LCD_P8x16s_2
    549            }
    550          }
   \                     ??LCD_P8x16s_3: (+1)
   \   00000098   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??string:
   \   00000000                      DS8 12
    551          //==============================================================
    552          //函数名：LCD_P8x16Str(byte x,byte y,byte *p)
    553          //功能描述：写入一组标准ASCII字符串
    554          //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
    555          //返回：无
    556          //==============================================================  

   \                                 In section .text, align 2, keep-with-next
    557          void LCD_P8x16Str(byte x,byte y,byte ch[])
    558          {
   \                     LCD_P8x16Str: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    559            byte c=0,i=0,j=0;
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
   \   00000014   0xE012             B.N      ??LCD_P8x16Str_0
    560            
    561            while (ch[j]!='\0')
    562            {    
    563              c =ch[j]-32;
    564              if(x>120){x=0;y++;}
    565              LCD_Set_Pos(x,y);    
    566              for(i=0;i<8;i++)     
    567                LCD_WrDat(F8X16[c*16+i]);
    568              LCD_Set_Pos(x,y+1);    
    569              for(i=0;i<8;i++)     
    570                LCD_WrDat(F8X16[c*16+i+8]);  
   \                     ??LCD_P8x16Str_1: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable10_14
   \   00000018   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001A   0x0139             LSLS     R1,R7,#+4
   \   0000001C   0xFA51 0xF188      UXTAB    R1,R1,R8
   \   00000020   0x1808             ADDS     R0,R1,R0
   \   00000022   0x7A00             LDRB     R0,[R0, #+8]
   \   00000024   0x.... 0x....      BL       LCD_WrDat
   \   00000028   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_P8x16Str_2: (+1)
   \   0000002C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000030   0xF1B8 0x0F08      CMP      R8,#+8
   \   00000034   0xDBEF             BLT.N    ??LCD_P8x16Str_1
    571              x+=8;
   \   00000036   0x3408             ADDS     R4,R4,#+8
    572              j++;
   \   00000038   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_P8x16Str_0: (+1)
   \   0000003C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000040   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD02B             BEQ.N    ??LCD_P8x16Str_3
   \   00000048   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004C   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   00000050   0xF1B0 0x0720      SUBS     R7,R0,#+32
   \   00000054   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000056   0x2C79             CMP      R4,#+121
   \   00000058   0xDB01             BLT.N    ??LCD_P8x16Str_4
   \   0000005A   0x2400             MOVS     R4,#+0
   \   0000005C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_P8x16Str_4: (+1)
   \   0000005E   0x0029             MOVS     R1,R5
   \   00000060   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x.... 0x....      BL       LCD_Set_Pos
   \   0000006A   0xF05F 0x0800      MOVS     R8,#+0
   \   0000006E   0xE009             B.N      ??LCD_P8x16Str_5
   \                     ??LCD_P8x16Str_6: (+1)
   \   00000070   0x....             LDR.N    R0,??DataTable10_14
   \   00000072   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000074   0x0139             LSLS     R1,R7,#+4
   \   00000076   0xFA51 0xF188      UXTAB    R1,R1,R8
   \   0000007A   0x5C08             LDRB     R0,[R1, R0]
   \   0000007C   0x.... 0x....      BL       LCD_WrDat
   \   00000080   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_P8x16Str_5: (+1)
   \   00000084   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000088   0xF1B8 0x0F08      CMP      R8,#+8
   \   0000008C   0xDBF0             BLT.N    ??LCD_P8x16Str_6
   \   0000008E   0x1C69             ADDS     R1,R5,#+1
   \   00000090   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000092   0x0020             MOVS     R0,R4
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x.... 0x....      BL       LCD_Set_Pos
   \   0000009A   0xF05F 0x0800      MOVS     R8,#+0
   \   0000009E   0xE7C5             B.N      ??LCD_P8x16Str_2
    573            }
    574          }
   \                     ??LCD_P8x16Str_3: (+1)
   \   000000A0   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    575          //输出汉字字符串

   \                                 In section .text, align 2, keep-with-next
    576          void LCD_P16x16Str(byte x,byte y,byte ch[])
    577          {
   \                     LCD_P16x16Str: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
    578            byte wm=0,ii = 0;
   \   0000000A   0xF05F 0x0900      MOVS     R9,#+0
   \   0000000E   0x2700             MOVS     R7,#+0
    579            word adder=1; 
   \   00000010   0xF05F 0x0801      MOVS     R8,#+1
   \   00000014   0xE00B             B.N      ??LCD_P16x16Str_0
    580            while(ch[ii] != '\0')
    581            {
    582              wm = 0;
    583              adder = 1;
    584              while(F16x16_Idx[wm] > 127)
    585              {
    586                if(F16x16_Idx[wm] == ch[ii])
    587                {
    588                  if(F16x16_Idx[wm + 1] == ch[ii + 1])
    589                  {
    590                    adder = wm * 16;
    591                    break;
    592                  }
    593                }
    594                wm += 2;			
    595              }
    596              if(x>128){x=0;y++;}
    597              LCD_Set_Pos(x , y); 
    598              if(adder != 1)// 显示汉字					
    599              {
    600                LCD_Set_Pos(x , y);
    601                for(wm = 0;wm < 16;wm++)               
    602                {
    603                  LCD_WrDat(F16x16[adder]);	
    604                  adder += 1;
    605                }      
    606                LCD_Set_Pos(x,y + 1); 
    607                for(wm = 0;wm < 16;wm++)          
    608                {
    609                  LCD_WrDat(F16x16[adder]);
    610                  adder += 1;
    611                }   		
    612              }
    613              else			  //显示空白字符			
    614              {
    615                ii += 1;
    616                LCD_Set_Pos(x,y);
    617                for(wm = 0;wm < 16;wm++)
    618                {
    619                  LCD_WrDat(0);
    620                }
    621                LCD_Set_Pos(x,y + 1);
    622                for(wm = 0;wm < 16;wm++)
    623                {   		
    624                  LCD_WrDat(0);	
   \                     ??LCD_P16x16Str_1: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       LCD_WrDat
    625                }
   \   0000001C   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_P16x16Str_2: (+1)
   \   00000020   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000024   0xF1B9 0x0F10      CMP      R9,#+16
   \   00000028   0xDBF5             BLT.N    ??LCD_P16x16Str_1
    626              }
    627              x +=16;
   \                     ??LCD_P16x16Str_3: (+1)
   \   0000002A   0x3610             ADDS     R6,R6,#+16
    628              ii += 2;
   \   0000002C   0x1CBF             ADDS     R7,R7,#+2
   \                     ??LCD_P16x16Str_0: (+1)
   \   0000002E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000030   0x5D78             LDRB     R0,[R7, R5]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xF000 0x8087      BEQ.W    ??LCD_P16x16Str_4
   \   00000038   0xF05F 0x0900      MOVS     R9,#+0
   \   0000003C   0xF05F 0x0801      MOVS     R8,#+1
   \   00000040   0xE001             B.N      ??LCD_P16x16Str_5
   \                     ??LCD_P16x16Str_6: (+1)
   \   00000042   0xF119 0x0902      ADDS     R9,R9,#+2
   \                     ??LCD_P16x16Str_5: (+1)
   \   00000046   0x....             LDR.N    R0,??DataTable10_15
   \   00000048   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004C   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   00000050   0x2880             CMP      R0,#+128
   \   00000052   0xDB19             BLT.N    ??LCD_P16x16Str_7
   \   00000054   0x....             LDR.N    R0,??DataTable10_15
   \   00000056   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000005A   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   0000005E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000060   0x5D79             LDRB     R1,[R7, R5]
   \   00000062   0x4288             CMP      R0,R1
   \   00000064   0xD1ED             BNE.N    ??LCD_P16x16Str_6
   \   00000066   0x....             LDR.N    R0,??DataTable10_15
   \   00000068   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000006C   0xEB19 0x0000      ADDS     R0,R9,R0
   \   00000070   0x7840             LDRB     R0,[R0, #+1]
   \   00000072   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000074   0x1979             ADDS     R1,R7,R5
   \   00000076   0x7849             LDRB     R1,[R1, #+1]
   \   00000078   0x4288             CMP      R0,R1
   \   0000007A   0xD1E2             BNE.N    ??LCD_P16x16Str_6
   \   0000007C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000080   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000084   0xEA5F 0x1809      LSLS     R8,R9,#+4
   \                     ??LCD_P16x16Str_7: (+1)
   \   00000088   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008A   0x2E81             CMP      R6,#+129
   \   0000008C   0xDB01             BLT.N    ??LCD_P16x16Str_8
   \   0000008E   0x2600             MOVS     R6,#+0
   \   00000090   0x1C64             ADDS     R4,R4,#+1
   \                     ??LCD_P16x16Str_8: (+1)
   \   00000092   0x0021             MOVS     R1,R4
   \   00000094   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000096   0x0030             MOVS     R0,R6
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x.... 0x....      BL       LCD_Set_Pos
   \   0000009E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000A2   0xF1B8 0x0F01      CMP      R8,#+1
   \   000000A6   0xD031             BEQ.N    ??LCD_P16x16Str_9
   \   000000A8   0x0021             MOVS     R1,R4
   \   000000AA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000AC   0x0030             MOVS     R0,R6
   \   000000AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B0   0x.... 0x....      BL       LCD_Set_Pos
   \   000000B4   0xF05F 0x0900      MOVS     R9,#+0
   \   000000B8   0xE00A             B.N      ??LCD_P16x16Str_10
   \                     ??LCD_P16x16Str_11: (+1)
   \   000000BA   0x....             LDR.N    R0,??DataTable10_16
   \   000000BC   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000C0   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   000000C4   0x.... 0x....      BL       LCD_WrDat
   \   000000C8   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000CC   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_P16x16Str_10: (+1)
   \   000000D0   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000D4   0xF1B9 0x0F10      CMP      R9,#+16
   \   000000D8   0xDBEF             BLT.N    ??LCD_P16x16Str_11
   \   000000DA   0x1C61             ADDS     R1,R4,#+1
   \   000000DC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000DE   0x0030             MOVS     R0,R6
   \   000000E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E2   0x.... 0x....      BL       LCD_Set_Pos
   \   000000E6   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??LCD_P16x16Str_12: (+1)
   \   000000EA   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000EE   0xF1B9 0x0F10      CMP      R9,#+16
   \   000000F2   0xDA9A             BGE.N    ??LCD_P16x16Str_3
   \   000000F4   0x....             LDR.N    R0,??DataTable10_16
   \   000000F6   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000FA   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   000000FE   0x.... 0x....      BL       LCD_WrDat
   \   00000102   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000106   0xF119 0x0901      ADDS     R9,R9,#+1
   \   0000010A   0xE7EE             B.N      ??LCD_P16x16Str_12
   \                     ??LCD_P16x16Str_9: (+1)
   \   0000010C   0x1C7F             ADDS     R7,R7,#+1
   \   0000010E   0x0021             MOVS     R1,R4
   \   00000110   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000112   0x0030             MOVS     R0,R6
   \   00000114   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000116   0x.... 0x....      BL       LCD_Set_Pos
   \   0000011A   0xF05F 0x0900      MOVS     R9,#+0
   \   0000011E   0xE004             B.N      ??LCD_P16x16Str_13
   \                     ??LCD_P16x16Str_14: (+1)
   \   00000120   0x2000             MOVS     R0,#+0
   \   00000122   0x.... 0x....      BL       LCD_WrDat
   \   00000126   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_P16x16Str_13: (+1)
   \   0000012A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000012E   0xF1B9 0x0F10      CMP      R9,#+16
   \   00000132   0xDBF5             BLT.N    ??LCD_P16x16Str_14
   \   00000134   0x1C61             ADDS     R1,R4,#+1
   \   00000136   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000138   0x0030             MOVS     R0,R6
   \   0000013A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013C   0x.... 0x....      BL       LCD_Set_Pos
   \   00000140   0xF05F 0x0900      MOVS     R9,#+0
   \   00000144   0xE76C             B.N      ??LCD_P16x16Str_2
    629            }
    630          }
   \                     ??LCD_P16x16Str_4: (+1)
   \   00000146   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    631          //输出汉字和字符混合字符串

   \                                 In section .text, align 2, keep-with-next
    632          void LCD_Print(byte x, byte y, uint8 ch[])
    633          {
   \                     LCD_Print: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    634            uint8 ch2[3];
    635            uint8 ii=0;        
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xE014             B.N      ??LCD_Print_0
    636            while(ch[ii] != '\0')
    637            {
    638              if(ch[ii] > 127)
    639              {
    640                ch2[0] = ch[ii];
   \                     ??LCD_Print_1: (+1)
   \   0000000C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000000E   0x5DB8             LDRB     R0,[R7, R6]
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    641                ch2[1] = ch[ii + 1];
   \   00000014   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000016   0x19B8             ADDS     R0,R7,R6
   \   00000018   0x7840             LDRB     R0,[R0, #+1]
   \   0000001A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    642                ch2[2] = '\0';			//汉字为两个字节
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x0002      STRB     R0,[SP, #+2]
    643                LCD_P16x16Str(x , y, ch2);	//显示汉字
   \   00000024   0xAA00             ADD      R2,SP,#+0
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x.... 0x....      BL       LCD_P16x16Str
    644                x += 16;
   \   00000032   0x3410             ADDS     R4,R4,#+16
    645                ii += 2;
   \   00000034   0x1CBF             ADDS     R7,R7,#+2
    646              }
   \                     ??LCD_Print_0: (+1)
   \   00000036   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   0x5DB8             LDRB     R0,[R7, R6]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD014             BEQ.N    ??LCD_Print_2
   \   0000003E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000040   0x5DB8             LDRB     R0,[R7, R6]
   \   00000042   0x2880             CMP      R0,#+128
   \   00000044   0xDAE2             BGE.N    ??LCD_Print_1
    647              else
    648              {
    649                ch2[0] = ch[ii];	
   \   00000046   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000048   0x5DB8             LDRB     R0,[R7, R6]
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    650                ch2[1] = '\0';			//字母占一个字节
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xF88D 0x0001      STRB     R0,[SP, #+1]
    651                LCD_P8x16Str(x , y , ch2);	//显示字母
   \   00000054   0xAA00             ADD      R2,SP,#+0
   \   00000056   0x0029             MOVS     R1,R5
   \   00000058   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x.... 0x....      BL       LCD_P8x16Str
    652                x += 8;
   \   00000062   0x3408             ADDS     R4,R4,#+8
    653                ii+= 1;
   \   00000064   0x1C7F             ADDS     R7,R7,#+1
   \   00000066   0xE7E6             B.N      ??LCD_Print_0
    654              }
    655            }
    656          } 
   \                     ??LCD_Print_2: (+1)
   \   00000068   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    657          
    658          //==============================================================
    659          //函数名： void Draw_BMP(byte x,byte y)
    660          //功能描述：显示BMP图片128×64
    661          //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
    662          //返回：无
    663          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    664          void Draw_BMP(byte x0,byte y0,byte x1,byte y1,byte bmp[])
    665          { 	
   \                     Draw_BMP: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
    666            word ii=0;
   \   0000000A   0x2700             MOVS     R7,#+0
    667            byte x,y;
    668            
    669            if(y1%8==0) y=y1/8;      
   \   0000000C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000E   0x2008             MOVS     R0,#+8
   \   00000010   0xFB96 0xF2F0      SDIV     R2,R6,R0
   \   00000014   0xFB02 0x6210      MLS      R2,R2,R0,R6
   \   00000018   0x2A00             CMP      R2,#+0
   \   0000001A   0xD104             BNE.N    ??Draw_BMP_0
   \   0000001C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001E   0x2008             MOVS     R0,#+8
   \   00000020   0xFB96 0xFAF0      SDIV     R10,R6,R0
   \   00000024   0xE005             B.N      ??Draw_BMP_1
    670            else y=y1/8+1;
   \                     ??Draw_BMP_0: (+1)
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0x2008             MOVS     R0,#+8
   \   0000002A   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   0000002E   0xF110 0x0A01      ADDS     R10,R0,#+1
    671            for(y=y0;y<=y1;y++)
   \                     ??Draw_BMP_1: (+1)
   \   00000032   0x468A             MOV      R10,R1
   \   00000034   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   \   00000038   0xE00E             B.N      ??Draw_BMP_2
    672            {
    673              LCD_Set_Pos(x0,y);				
    674              for(x=x0;x<x1;x++)
    675              {      
    676                LCD_WrDat(bmp[ii++]);	    	
   \                     ??Draw_BMP_3: (+1)
   \   0000003A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000003C   0xF817 0x0008      LDRB     R0,[R7, R8]
   \   00000040   0x.... 0x....      BL       LCD_WrDat
   \   00000044   0x1C7F             ADDS     R7,R7,#+1
    677              }
   \   00000046   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??Draw_BMP_4: (+1)
   \   0000004A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000050   0x45A9             CMP      R9,R5
   \   00000052   0xD3F2             BCC.N    ??Draw_BMP_3
   \   00000054   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \                     ??Draw_BMP_2: (+1)
   \   00000058   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000005E   0x4556             CMP      R6,R10
   \   00000060   0xD307             BCC.N    ??Draw_BMP_5
   \   00000062   0x4651             MOV      R1,R10
   \   00000064   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0x.... 0x....      BL       LCD_Set_Pos
   \   0000006E   0x46A1             MOV      R9,R4
   \   00000070   0xE7EB             B.N      ??Draw_BMP_4
    678            }
    679          }
   \                     ??Draw_BMP_5: (+1)
   \   00000072   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    680          

   \                                 In section .text, align 2, keep-with-next
    681          void Show_Number(uint8 X,uint8 Y,int32 number)
    682          {
   \                     Show_Number: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    683            if(number<0)
   \   00000008   0x2E00             CMP      R6,#+0
   \   0000000A   0xD508             BPL.N    ??Show_Number_0
    684            {
    685              number = - number;
   \   0000000C   0x4276             RSBS     R6,R6,#+0
    686              LCD_P6x8char(X,Y, '-');
   \   0000000E   0x222D             MOVS     R2,#+45
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LCD_P6x8char
   \   0000001C   0xE006             B.N      ??Show_Number_1
    687            }
    688            else
    689            {
    690              LCD_P6x8char(X,Y,' ');
   \                     ??Show_Number_0: (+1)
   \   0000001E   0x2220             MOVS     R2,#+32
   \   00000020   0x0029             MOVS     R1,R5
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       LCD_P6x8char
    691            }
    692          
    693            if(number/1000 > 0)
   \                     ??Show_Number_1: (+1)
   \   0000002C   0xF44F 0x707A      MOV      R0,#+1000
   \   00000030   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xDB47             BLT.N    ??Show_Number_2
    694            {
    695              LCD_P6x8char(X+6,Y, number%10000/1000+48);
   \   00000038   0xF242 0x7010      MOVW     R0,#+10000
   \   0000003C   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   00000040   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   00000044   0xF44F 0x717A      MOV      R1,#+1000
   \   00000048   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000004C   0xF110 0x0230      ADDS     R2,R0,#+48
   \   00000050   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000052   0x0029             MOVS     R1,R5
   \   00000054   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000056   0x1DA0             ADDS     R0,R4,#+6
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x.... 0x....      BL       LCD_P6x8char
    696              LCD_P6x8char(X+12,Y,number%1000/100+48);
   \   0000005E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000062   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   00000066   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   0000006A   0x2164             MOVS     R1,#+100
   \   0000006C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000070   0xF110 0x0230      ADDS     R2,R0,#+48
   \   00000074   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000076   0x0029             MOVS     R1,R5
   \   00000078   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000007A   0xF114 0x000C      ADDS     R0,R4,#+12
   \   0000007E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   0x.... 0x....      BL       LCD_P6x8char
    697              LCD_P6x8char(X+18,Y,number%100/10+48);
   \   00000084   0x2064             MOVS     R0,#+100
   \   00000086   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   0000008A   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   0000008E   0x210A             MOVS     R1,#+10
   \   00000090   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000094   0xF110 0x0230      ADDS     R2,R0,#+48
   \   00000098   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000009A   0x0029             MOVS     R1,R5
   \   0000009C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009E   0xF114 0x0012      ADDS     R0,R4,#+18
   \   000000A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A4   0x.... 0x....      BL       LCD_P6x8char
    698              LCD_P6x8char(X+24,Y,number%10+48); 
   \   000000A8   0x200A             MOVS     R0,#+10
   \   000000AA   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   000000AE   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   000000B2   0xF110 0x0230      ADDS     R2,R0,#+48
   \   000000B6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000B8   0x0029             MOVS     R1,R5
   \   000000BA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BC   0xF114 0x0018      ADDS     R0,R4,#+24
   \   000000C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C2   0x.... 0x....      BL       LCD_P6x8char
   \   000000C6   0xE09C             B.N      ??Show_Number_3
    699            }
    700            else if(number/100 > 0)
   \                     ??Show_Number_2: (+1)
   \   000000C8   0x2064             MOVS     R0,#+100
   \   000000CA   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   000000CE   0x2801             CMP      R0,#+1
   \   000000D0   0xDB3B             BLT.N    ??Show_Number_4
    701            {
    702              LCD_P6x8char(X+6,Y, ' ');
   \   000000D2   0x2220             MOVS     R2,#+32
   \   000000D4   0x0029             MOVS     R1,R5
   \   000000D6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000D8   0x1DA0             ADDS     R0,R4,#+6
   \   000000DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DC   0x.... 0x....      BL       LCD_P6x8char
    703              LCD_P6x8char(X+12,Y,number%1000/100+48);
   \   000000E0   0xF44F 0x707A      MOV      R0,#+1000
   \   000000E4   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   000000E8   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   000000EC   0x2164             MOVS     R1,#+100
   \   000000EE   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000F2   0xF110 0x0230      ADDS     R2,R0,#+48
   \   000000F6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000F8   0x0029             MOVS     R1,R5
   \   000000FA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000FC   0xF114 0x000C      ADDS     R0,R4,#+12
   \   00000100   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000102   0x.... 0x....      BL       LCD_P6x8char
    704              LCD_P6x8char(X+18,Y,number%100/10+48);
   \   00000106   0x2064             MOVS     R0,#+100
   \   00000108   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   0000010C   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   00000110   0x210A             MOVS     R1,#+10
   \   00000112   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000116   0xF110 0x0230      ADDS     R2,R0,#+48
   \   0000011A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000011C   0x0029             MOVS     R1,R5
   \   0000011E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000120   0xF114 0x0012      ADDS     R0,R4,#+18
   \   00000124   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000126   0x.... 0x....      BL       LCD_P6x8char
    705              LCD_P6x8char(X+24,Y,number%10+48); 
   \   0000012A   0x200A             MOVS     R0,#+10
   \   0000012C   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   00000130   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   00000134   0xF110 0x0230      ADDS     R2,R0,#+48
   \   00000138   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000013A   0x0029             MOVS     R1,R5
   \   0000013C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000013E   0xF114 0x0018      ADDS     R0,R4,#+24
   \   00000142   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000144   0x.... 0x....      BL       LCD_P6x8char
   \   00000148   0xE05B             B.N      ??Show_Number_3
    706            }
    707            else if(number/10 > 0)
   \                     ??Show_Number_4: (+1)
   \   0000014A   0x200A             MOVS     R0,#+10
   \   0000014C   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   00000150   0x2801             CMP      R0,#+1
   \   00000152   0xDB30             BLT.N    ??Show_Number_5
    708            {
    709              LCD_P6x8char(X+6,Y, ' ');
   \   00000154   0x2220             MOVS     R2,#+32
   \   00000156   0x0029             MOVS     R1,R5
   \   00000158   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000015A   0x1DA0             ADDS     R0,R4,#+6
   \   0000015C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000015E   0x.... 0x....      BL       LCD_P6x8char
    710              LCD_P6x8char(X+12,Y,' ');
   \   00000162   0x2220             MOVS     R2,#+32
   \   00000164   0x0029             MOVS     R1,R5
   \   00000166   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000168   0xF114 0x000C      ADDS     R0,R4,#+12
   \   0000016C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000016E   0x.... 0x....      BL       LCD_P6x8char
    711              LCD_P6x8char(X+18,Y,number%100/10+48);
   \   00000172   0x2064             MOVS     R0,#+100
   \   00000174   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   00000178   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   0000017C   0x210A             MOVS     R1,#+10
   \   0000017E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000182   0xF110 0x0230      ADDS     R2,R0,#+48
   \   00000186   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000188   0x0029             MOVS     R1,R5
   \   0000018A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000018C   0xF114 0x0012      ADDS     R0,R4,#+18
   \   00000190   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000192   0x.... 0x....      BL       LCD_P6x8char
    712              LCD_P6x8char(X+24,Y,number%10+48); 
   \   00000196   0x200A             MOVS     R0,#+10
   \   00000198   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   0000019C   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   000001A0   0xF110 0x0230      ADDS     R2,R0,#+48
   \   000001A4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001A6   0x0029             MOVS     R1,R5
   \   000001A8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001AA   0xF114 0x0018      ADDS     R0,R4,#+24
   \   000001AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001B0   0x.... 0x....      BL       LCD_P6x8char
   \   000001B4   0xE025             B.N      ??Show_Number_3
    713            }
    714            else
    715            {
    716              LCD_P6x8char(X+6,Y, ' ');
   \                     ??Show_Number_5: (+1)
   \   000001B6   0x2220             MOVS     R2,#+32
   \   000001B8   0x0029             MOVS     R1,R5
   \   000001BA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001BC   0x1DA0             ADDS     R0,R4,#+6
   \   000001BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001C0   0x.... 0x....      BL       LCD_P6x8char
    717              LCD_P6x8char(X+12,Y,' ');
   \   000001C4   0x2220             MOVS     R2,#+32
   \   000001C6   0x0029             MOVS     R1,R5
   \   000001C8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001CA   0xF114 0x000C      ADDS     R0,R4,#+12
   \   000001CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001D0   0x.... 0x....      BL       LCD_P6x8char
    718              LCD_P6x8char(X+18,Y,' ');
   \   000001D4   0x2220             MOVS     R2,#+32
   \   000001D6   0x0029             MOVS     R1,R5
   \   000001D8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001DA   0xF114 0x0012      ADDS     R0,R4,#+18
   \   000001DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001E0   0x.... 0x....      BL       LCD_P6x8char
    719              LCD_P6x8char(X+24,Y,number%10+48); 
   \   000001E4   0x200A             MOVS     R0,#+10
   \   000001E6   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   000001EA   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   000001EE   0xF110 0x0230      ADDS     R2,R0,#+48
   \   000001F2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001F4   0x0029             MOVS     R1,R5
   \   000001F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001F8   0xF114 0x0018      ADDS     R0,R4,#+24
   \   000001FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001FE   0x.... 0x....      BL       LCD_P6x8char
    720            }
    721            
    722          }
   \                     ??Show_Number_3: (+1)
   \   00000202   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     gpio_init_struct0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     ??j

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     ??temp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     ??number_sign

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     ??Num_Wide

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     ??i

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x........         DC32     table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x43FE003C         DC32     0x43fe003c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x43FE0034         DC32     0x43fe0034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x43FE0030         DC32     0x43fe0030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x43FE0040         DC32     0x43fe0040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     F6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x........         DC32     ??string

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x........         DC32     F8X16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x........         DC32     F16x16_Idx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x........         DC32     F16x16
    723          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   Draw_BMP
        32   -> LCD_Set_Pos
        32   -> LCD_WrDat
      16   LCD_CLS
        16   -> LCD_WrCmd
        16   -> LCD_WrDat
       0   LCD_DLY_ms
      16   LCD_Fill
        16   -> LCD_WrCmd
        16   -> LCD_WrDat
       8   LCD_Init
         8   -> LCD_DLY_ms
         8   -> LCD_Fill
         8   -> LCD_Set_Pos
         8   -> LCD_WrCmd
      32   LCD_P16x16Str
        32   -> LCD_Set_Pos
        32   -> LCD_WrDat
      32   LCD_P6x8Str
        32   -> LCD_Set_Pos
        32   -> LCD_WrDat
      16   LCD_P6x8char
        16   -> LCD_Set_Pos
        16   -> LCD_WrDat
      40   LCD_P6x8s
        40   -> LCD_Set_Pos
        40   -> LCD_WrDat
        40   -> Num2Str
      32   LCD_P8x16Str
        32   -> LCD_Set_Pos
        32   -> LCD_WrDat
      24   LCD_P8x16s
        24   -> LCD_Set_Pos
        24   -> LCD_WrDat
        24   -> Num2Str
      24   LCD_Print
        24   -> LCD_P16x16Str
        24   -> LCD_P8x16Str
      16   LCD_PutPixel
        16   -> LCD_Set_Pos
        16   -> LCD_WrCmd
        16   -> LCD_WrDat
      32   LCD_Rectangle
        32   -> LCD_DLY_ms
        32   -> LCD_Set_Pos
        32   -> LCD_WrDat
       8   LCD_Set_Pos
         8   -> LCD_WrCmd
       0   LCD_WrCmd
       0   LCD_WrDat
       4   Num2Str
      16   Show_Number
        16   -> LCD_P6x8char
      24   init_gpio_oled
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
     118  Draw_BMP
     196  F16x16
      16  F16x16_Idx
     552  F6x8
    1520  F8X16
      56  LCD_CLS
      26  LCD_DLY_ms
      60  LCD_Fill
     216  LCD_Init
     330  LCD_P16x16Str
     122  LCD_P6x8Str
      62  LCD_P6x8char
     120  LCD_P6x8s
     164  LCD_P8x16Str
     156  LCD_P8x16s
     106  LCD_Print
      80  LCD_PutPixel
     152  LCD_Rectangle
      44  LCD_Set_Pos
      74  LCD_WrCmd
      78  LCD_WrDat
     264  Num2Str
       1  Num_Wide
     516  Show_Number
      20  gpio_init_struct0
       1  i
      68  init_gpio_oled
       1  j
       4  number_sign
      12  string
      12  table
       4  temp

 
    43 bytes in section .bss
 2 296 bytes in section .rodata
 2 880 bytes in section .text
 
 2 880 bytes of CODE  memory
 2 296 bytes of CONST memory
    43 bytes of DATA  memory

Errors: none
Warnings: none
