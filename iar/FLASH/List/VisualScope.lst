###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        15/Aug/2016  15:07:19
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\VisualScope.c
#    Command line =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\VisualScope.c -D
#        LPLD_K60 -D USE_K60D10 -lCN
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\ -lB
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\ -o
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "F:\Program
#        Files\IAR_FOR_ARM\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\app\ -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\CPU\ -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\common\
#        -I E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\HW\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\FatFs\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\FatFs\option\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\common\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\driver\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\descriptor\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\class\
#        -Ol -I "F:\Program Files\IAR_FOR_ARM\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\VisualScope.lst
#    Object file  =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\Obj\VisualScope.o
#
###############################################################################

E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\VisualScope.c
      1          #include "VisualScope.h"
      2          

   \                                 In section .bss, align 4
      3          uint16 Send_Data[4] = {0,0,0,0};
   \                     Send_Data:
   \   00000000                      DS8 8

   \                                 In section .text, align 2, keep-with-next
      4          uint16 CRC_Check(uint8 *buf, uint8 CRC_CNT)
      5          {
   \                     CRC_Check: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
      6              uint16 CRC_temp;
      7              uint8 i,j;
      8              CRC_temp = 0xffff;
   \   00000002   0xF64F 0x72FF      MOVW     R2,#+65535
      9              for (i=0;i<CRC_CNT; i++){      
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xE000             B.N      ??CRC_Check_0
   \                     ??CRC_Check_1: (+1)
   \   0000000A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??CRC_Check_0: (+1)
   \   0000000C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x428B             CMP      R3,R1
   \   00000012   0xD213             BCS.N    ??CRC_Check_2
     10                  CRC_temp ^= buf[i];
   \   00000014   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000016   0x5C1C             LDRB     R4,[R3, R0]
   \   00000018   0x4062             EORS     R2,R4,R2
     11                  for (j=0;j<8;j++) {
   \   0000001A   0x2400             MOVS     R4,#+0
   \   0000001C   0xE002             B.N      ??CRC_Check_3
     12                      if (CRC_temp & 0x01)
     13                          CRC_temp = (CRC_temp >>1 ) ^ 0xa001;
     14                      else
     15                          CRC_temp = CRC_temp >> 1;
   \                     ??CRC_Check_4: (+1)
   \   0000001E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000020   0x0852             LSRS     R2,R2,#+1
   \                     ??CRC_Check_5: (+1)
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \                     ??CRC_Check_3: (+1)
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C08             CMP      R4,#+8
   \   00000028   0xDAEF             BGE.N    ??CRC_Check_1
   \   0000002A   0x07D5             LSLS     R5,R2,#+31
   \   0000002C   0xD5F7             BPL.N    ??CRC_Check_4
   \   0000002E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000030   0x0852             LSRS     R2,R2,#+1
   \   00000032   0xF482 0x4220      EOR      R2,R2,#0xA000
   \   00000036   0xF092 0x0201      EORS     R2,R2,#0x1
   \   0000003A   0xE7F2             B.N      ??CRC_Check_5
     16                  }
     17              }
     18              return(CRC_temp);
   \                     ??CRC_Check_2: (+1)
   \   0000003C   0x0010             MOVS     R0,R2
   \   0000003E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000040   0xBC30             POP      {R4,R5}
   \   00000042   0x4770             BX       LR               ;; return
     19          }
     20          //·¢ËÍÊý¾Ý

   \                                 In section .text, align 2, keep-with-next
     21          void OutPut_Data(void)
     22          {
   \                     OutPut_Data: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
     23            uint8 databuf[10] = {0};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xC00E             STM      R0!,{R1-R3}
   \   0000000E   0x380C             SUBS     R0,R0,#+12
     24            uint8 i;
     25            uint16 CRC16 = 0;
   \   00000010   0x2000             MOVS     R0,#+0
     26            for(i=0;i<4;i++) 
   \   00000012   0x2400             MOVS     R4,#+0
   \   00000014   0xE01B             B.N      ??OutPut_Data_0
     27            {
     28              databuf[i*2]   = (uint8)(Send_Data[i]%256);
   \                     ??OutPut_Data_1: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable0
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   0000001E   0xF44F 0x7180      MOV      R1,#+256
   \   00000022   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000026   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000002A   0xA800             ADD      R0,SP,#+0
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0xF800 0x2014      STRB     R2,[R0, R4, LSL #+1]
     29              databuf[i*2+1] = (uint8)(Send_Data[i]/256);
   \   00000032   0x....             LDR.N    R0,??DataTable0
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   0000003A   0xF44F 0x7180      MOV      R1,#+256
   \   0000003E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000042   0xA900             ADD      R1,SP,#+0
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xEB11 0x0144      ADDS     R1,R1,R4, LSL #+1
   \   0000004A   0x7048             STRB     R0,[R1, #+1]
     30            }
   \   0000004C   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_0: (+1)
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x2C04             CMP      R4,#+4
   \   00000052   0xDBE0             BLT.N    ??OutPut_Data_1
     31            CRC16 = CRC_Check(databuf,8);
   \   00000054   0x2108             MOVS     R1,#+8
   \   00000056   0xA800             ADD      R0,SP,#+0
   \   00000058   0x.... 0x....      BL       CRC_Check
     32            databuf[8] = CRC16%256;
   \   0000005C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   0xF44F 0x7180      MOV      R1,#+256
   \   00000062   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000066   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000006A   0xF88D 0x2008      STRB     R2,[SP, #+8]
     33            databuf[9] = CRC16/256;
   \   0000006E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000070   0xF44F 0x7180      MOV      R1,#+256
   \   00000074   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000078   0xF88D 0x0009      STRB     R0,[SP, #+9]
     34            for(i=0;i<10;i++)
   \   0000007C   0x2400             MOVS     R4,#+0
   \   0000007E   0xE007             B.N      ??OutPut_Data_2
     35               LPLD_UART_PutChar(UART3,databuf[i]);
   \                     ??OutPut_Data_3: (+1)
   \   00000080   0xA800             ADD      R0,SP,#+0
   \   00000082   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000084   0x5621             LDRSB    R1,[R4, R0]
   \   00000086   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000088   0x....             LDR.N    R0,??DataTable0_1  ;; 0x4006d000
   \   0000008A   0x.... 0x....      BL       LPLD_UART_PutChar
   \   0000008E   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_2: (+1)
   \   00000090   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000092   0x2C0A             CMP      R4,#+10
   \   00000094   0xDBF4             BLT.N    ??OutPut_Data_3
     36          }
   \   00000096   0xBD1F             POP      {R0-R4,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     Send_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x4006D000         DC32     0x4006d000

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     37          /*Ö»Ðèµ÷ÓÃvoid OutPut_Data(void),¾Í¿ÉÊµÏÖÊý¾ÝµÄ·¢ËÍ¡£¹²ËÄ¸öÍ¨µÀ£¬½«ËùÒª·¢ËÍµÄÊý¾Ý·ÅÔÚSend_Data[]ÀïÃæ¡£
     38            Ê¾Àý£ºSend_Data[0] = (uint16)(Set_Speed);
     39                  Send_Data[1] = (uint16)(Get_Speed);
     40                  Send_Data[2] = (uint16)(Recognition_C_Line_1[0]);
     41                  Send_Data[3] = (uint16)(Recognition_C_Line_0[0]);*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CRC_Check
      24   OutPut_Data
        24   -> CRC_Check
        24   -> LPLD_UART_PutChar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
      12  ?_0
      68  CRC_Check
     152  OutPut_Data
       8  Send_Data

 
   8 bytes in section .bss
  12 bytes in section .rodata
 228 bytes in section .text
 
 228 bytes of CODE  memory
  12 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
