###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        15/Aug/2016  15:07:17
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\speedcheck.c
#    Command line =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\speedcheck.c -D
#        LPLD_K60 -D USE_K60D10 -lCN
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\ -lB
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\ -o
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "F:\Program
#        Files\IAR_FOR_ARM\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\app\ -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\CPU\ -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\common\
#        -I E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\HW\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\FatFs\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\FatFs\option\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\common\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\driver\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\descriptor\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\class\
#        -Ol -I "F:\Program Files\IAR_FOR_ARM\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\speedcheck.lst
#    Object file  =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\Obj\speedcheck.o
#
###############################################################################

E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\speedcheck.c
      1          #include "speedcheck.h"
      2          
      3          /************************测速变量**************************/

   \                                 In section .bss, align 4
      4          DMA_InitTypeDef    DMA_Struct1;
   \                     DMA_Struct1:
   \   00000000                      DS8 44

   \                                 In section .bss, align 4
      5          DMA_InitTypeDef    DMA_Struct2;
   \                     DMA_Struct2:
   \   00000000                      DS8 44

   \                                 In section .bss, align 1
      6          char Data1[1];//缓冲区
   \                     Data1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      7          char Data2[1];
   \                     Data2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
      8          int ch0_over_cnt = 0;//通道溢出计数
   \                     ch0_over_cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
      9          int ch1_over_cnt = 0;
   \                     ch1_over_cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     10          int  ch0_pulseacc;//脉冲累加值计数  
   \                     ch0_pulseacc:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     11          int  ch1_pulseacc;
   \                     ch1_pulseacc:
   \   00000000                      DS8 4
     12          //当前量

   \                                 In section .bss, align 4
     13          float Speed_LQ_now[10]={0};
   \                     Speed_LQ_now:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
     14          float Speed_RQ_now[10]={0};
   \                     Speed_RQ_now:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
     15          float speed_L=0;        //左轮速度
   \                     speed_L:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          float speed_R=0;        //右轮速度
   \                     speed_R:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     17          float speed_avg=0;     //平均速度
   \                     speed_avg:
   \   00000000                      DS8 4
     18          

   \                                 In section .text, align 2, keep-with-next
     19          void GetMotorPulse()//5ms
     20          {
   \                     GetMotorPulse: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     21            ch0_pulseacc = DMA_MAX_NUM - DMA0->TCD[DMA_CH1].CITER_ELINKNO;     //获得最终的脉冲累加值
   \   00000004   0xF647 0x70FF      MOVW     R0,#+32767
   \   00000008   0x....             LDR.N    R1,??DataTable3  ;; 0x40009036
   \   0000000A   0x8809             LDRH     R1,[R1, #+0]
   \   0000000C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000E   0x1A40             SUBS     R0,R0,R1
   \   00000010   0x....             LDR.N    R1,??DataTable3_1
   \   00000012   0x6008             STR      R0,[R1, #+0]
     22            ch1_pulseacc = DMA_MAX_NUM - DMA0->TCD[DMA_CH2].CITER_ELINKNO;
   \   00000014   0xF647 0x70FF      MOVW     R0,#+32767
   \   00000018   0x....             LDR.N    R1,??DataTable3_2  ;; 0x40009056
   \   0000001A   0x8809             LDRH     R1,[R1, #+0]
   \   0000001C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   0x1A40             SUBS     R0,R0,R1
   \   00000020   0x....             LDR.N    R1,??DataTable3_3
   \   00000022   0x6008             STR      R0,[R1, #+0]
     23            if(ch0_over_cnt !=0)
   \   00000024   0x....             LDR.N    R0,??DataTable3_4
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD00C             BEQ.N    ??GetMotorPulse_0
     24            {
     25              ch0_pulseacc = ch0_pulseacc + DMA_MAX_NUM*ch0_over_cnt;
   \   0000002C   0x....             LDR.N    R0,??DataTable3_1
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x....             LDR.N    R1,??DataTable3_4
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0xF647 0x72FF      MOVW     R2,#+32767
   \   00000038   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   0000003C   0x....             LDR.N    R1,??DataTable3_1
   \   0000003E   0x6008             STR      R0,[R1, #+0]
     26              ch0_over_cnt = 0;             //清零溢出计数
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x....             LDR.N    R1,??DataTable3_4
   \   00000044   0x6008             STR      R0,[R1, #+0]
     27            }
     28            if(ch1_over_cnt !=0)
   \                     ??GetMotorPulse_0: (+1)
   \   00000046   0x....             LDR.N    R0,??DataTable3_5
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD00C             BEQ.N    ??GetMotorPulse_1
     29            {
     30              ch1_pulseacc = ch1_pulseacc + DMA_MAX_NUM*ch1_over_cnt;
   \   0000004E   0x....             LDR.N    R0,??DataTable3_3
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x....             LDR.N    R1,??DataTable3_5
   \   00000054   0x6809             LDR      R1,[R1, #+0]
   \   00000056   0xF647 0x72FF      MOVW     R2,#+32767
   \   0000005A   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   0000005E   0x....             LDR.N    R1,??DataTable3_3
   \   00000060   0x6008             STR      R0,[R1, #+0]
     31              ch1_over_cnt = 0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR.N    R1,??DataTable3_5
   \   00000066   0x6008             STR      R0,[R1, #+0]
     32            }
     33            //初始化DMA模块
     34            LPLD_DMA_Init(DMA_Struct1); //初始化DMA模块
   \                     ??GetMotorPulse_1: (+1)
   \   00000068   0x....             LDR.N    R1,??DataTable3_6
   \   0000006A   0xB084             SUB      SP,SP,#+16
   \   0000006C   0x4668             MOV      R0,SP
   \   0000006E   0x222C             MOVS     R2,#+44
   \   00000070   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000074   0xBC0F             POP      {R0-R3}
   \   00000076   0x.... 0x....      BL       LPLD_DMA_Init
     35            LPLD_DMA_Init(DMA_Struct2);  
   \   0000007A   0x....             LDR.N    R1,??DataTable3_7
   \   0000007C   0xB084             SUB      SP,SP,#+16
   \   0000007E   0x4668             MOV      R0,SP
   \   00000080   0x222C             MOVS     R2,#+44
   \   00000082   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000086   0xBC0F             POP      {R0-R3}
   \   00000088   0x.... 0x....      BL       LPLD_DMA_Init
     36            LPLD_DMA_EnableReq(DMA_CH1); //开启通道请求
   \   0000008C   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4000800c
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000094   0x....             LDR.N    R1,??DataTable3_8  ;; 0x4000800c
   \   00000096   0x6008             STR      R0,[R1, #+0]
     37            LPLD_DMA_EnableReq(DMA_CH2);
   \   00000098   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4000800c
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000A0   0x....             LDR.N    R1,??DataTable3_8  ;; 0x4000800c
   \   000000A2   0x6008             STR      R0,[R1, #+0]
     38            
     39            if(ch0_pulseacc-500 > 0)
   \   000000A4   0x....             LDR.N    R0,??DataTable3_1
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0xF5B0 0x70FA      SUBS     R0,R0,#+500
   \   000000AC   0x2801             CMP      R0,#+1
   \   000000AE   0xDB03             BLT.N    ??GetMotorPulse_2
     40              ch0_pulseacc = 500;
   \   000000B0   0xF44F 0x70FA      MOV      R0,#+500
   \   000000B4   0x....             LDR.N    R1,??DataTable3_1
   \   000000B6   0x6008             STR      R0,[R1, #+0]
     41            if(ch1_pulseacc-500 > 0)
   \                     ??GetMotorPulse_2: (+1)
   \   000000B8   0x....             LDR.N    R0,??DataTable3_3
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0xF5B0 0x70FA      SUBS     R0,R0,#+500
   \   000000C0   0x2801             CMP      R0,#+1
   \   000000C2   0xDB03             BLT.N    ??GetMotorPulse_3
     42              ch1_pulseacc = 500;
   \   000000C4   0xF44F 0x70FA      MOV      R0,#+500
   \   000000C8   0x....             LDR.N    R1,??DataTable3_3
   \   000000CA   0x6008             STR      R0,[R1, #+0]
     43            //计划5ms测速一次，更新数组中的最后一个值
     44            if(PTB9_I) {Speed_LQ_now[9]=(float)ch0_pulseacc;}//左轮方向校准,右轮正转时编码器顺时针转，为高
   \                     ??GetMotorPulse_3: (+1)
   \   000000CC   0x....             LDR.N    R0,??DataTable3_9  ;; 0x43fe0a24
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xD006             BEQ.N    ??GetMotorPulse_4
   \   000000D4   0x....             LDR.N    R0,??DataTable3_1
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0x.... 0x....      BL       __aeabi_i2f
   \   000000DC   0x....             LDR.N    R1,??DataTable3_10
   \   000000DE   0x6248             STR      R0,[R1, #+36]
   \   000000E0   0xE007             B.N      ??GetMotorPulse_5
     45            else  {Speed_LQ_now[9]=-(float)ch0_pulseacc;}
   \                     ??GetMotorPulse_4: (+1)
   \   000000E2   0x....             LDR.N    R0,??DataTable3_1
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x.... 0x....      BL       __aeabi_i2f
   \   000000EA   0xF090 0x4000      EORS     R0,R0,#0x80000000
   \   000000EE   0x....             LDR.N    R1,??DataTable3_10
   \   000000F0   0x6248             STR      R0,[R1, #+36]
     46            if(PTC16_I){Speed_RQ_now[9]=-(float)ch1_pulseacc;}//右轮方向校准，左轮正转时编码器逆时针转，为低
   \                     ??GetMotorPulse_5: (+1)
   \   000000F2   0x....             LDR.N    R0,??DataTable3_11  ;; 0x43fe1240
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x2800             CMP      R0,#+0
   \   000000F8   0xD008             BEQ.N    ??GetMotorPulse_6
   \   000000FA   0x....             LDR.N    R0,??DataTable3_3
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0x.... 0x....      BL       __aeabi_i2f
   \   00000102   0xF090 0x4000      EORS     R0,R0,#0x80000000
   \   00000106   0x....             LDR.N    R1,??DataTable3_12
   \   00000108   0x6248             STR      R0,[R1, #+36]
   \   0000010A   0xE005             B.N      ??GetMotorPulse_7
     47            else  {Speed_RQ_now[9]=(float)ch1_pulseacc;}
   \                     ??GetMotorPulse_6: (+1)
   \   0000010C   0x....             LDR.N    R0,??DataTable3_3
   \   0000010E   0x6800             LDR      R0,[R0, #+0]
   \   00000110   0x.... 0x....      BL       __aeabi_i2f
   \   00000114   0x....             LDR.N    R1,??DataTable3_12
   \   00000116   0x6248             STR      R0,[R1, #+36]
     48            
     49            //数组中的值依次向前移动一个，去掉首个值，更新最后一个的值
     50            for(int i=0;i<9;i++) //0到8,有9个值
   \                     ??GetMotorPulse_7: (+1)
   \   00000118   0x2000             MOVS     R0,#+0
   \   0000011A   0xE00E             B.N      ??GetMotorPulse_8
     51            {
     52              Speed_LQ_now[i]=Speed_LQ_now[i+1];
   \                     ??GetMotorPulse_9: (+1)
   \   0000011C   0x....             LDR.N    R1,??DataTable3_10
   \   0000011E   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000122   0x6849             LDR      R1,[R1, #+4]
   \   00000124   0x....             LDR.N    R2,??DataTable3_10
   \   00000126   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
     53              Speed_RQ_now[i]=Speed_RQ_now[i+1];
   \   0000012A   0x....             LDR.N    R1,??DataTable3_12
   \   0000012C   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000130   0x6849             LDR      R1,[R1, #+4]
   \   00000132   0x....             LDR.N    R2,??DataTable3_12
   \   00000134   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
     54            }
   \   00000138   0x1C40             ADDS     R0,R0,#+1
   \                     ??GetMotorPulse_8: (+1)
   \   0000013A   0x2809             CMP      R0,#+9
   \   0000013C   0xDBEE             BLT.N    ??GetMotorPulse_9
     55            //历史9次的值求个平均值得到当前的速度值，保证速度平缓变化
     56            speed_L=speedPlus(Speed_LQ_now,9);//5ms
   \   0000013E   0x2109             MOVS     R1,#+9
   \   00000140   0x....             LDR.N    R0,??DataTable3_10
   \   00000142   0x.... 0x....      BL       speedPlus
   \   00000146   0x....             LDR.N    R1,??DataTable3_13
   \   00000148   0x6008             STR      R0,[R1, #+0]
     57            speed_R=speedPlus(Speed_RQ_now,9);//5ms
   \   0000014A   0x2109             MOVS     R1,#+9
   \   0000014C   0x....             LDR.N    R0,??DataTable3_12
   \   0000014E   0x.... 0x....      BL       speedPlus
   \   00000152   0x....             LDR.N    R1,??DataTable3_14
   \   00000154   0x6008             STR      R0,[R1, #+0]
     58            speed_avg=(speed_L+speed_R)/2;
   \   00000156   0x....             LDR.N    R0,??DataTable3_13
   \   00000158   0x6800             LDR      R0,[R0, #+0]
   \   0000015A   0x....             LDR.N    R1,??DataTable3_14
   \   0000015C   0x6809             LDR      R1,[R1, #+0]
   \   0000015E   0x.... 0x....      BL       __aeabi_fadd
   \   00000162   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000166   0x.... 0x....      BL       __aeabi_fdiv
   \   0000016A   0x....             LDR.N    R1,??DataTable3_15
   \   0000016C   0x6008             STR      R0,[R1, #+0]
     59            
     60            //speed_control();//速度电机量计算
     61            //speed_L=lvbo(Speed_LQ);//5ms
     62            //speed_R=lvbo(Speed_RQ);//5ms
     63          }
   \   0000016E   0xB007             ADD      SP,SP,#+28
   \   00000170   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
     64          void DMA_Init(void)
     65          {
   \                     DMA_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     66            DMA_Struct1.DMA_CHx=DMA_CH1;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable3_6
   \   00000008   0x7008             STRB     R0,[R1, #+0]
     67            DMA_Struct1.DMA_Req=PORTB_DMAREQ;
   \   0000000A   0x2032             MOVS     R0,#+50
   \   0000000C   0x....             LDR.N    R1,??DataTable3_6
   \   0000000E   0x7048             STRB     R0,[R1, #+1]
     68            DMA_Struct1.DMA_MajorLoopCnt=DMA_MAX_NUM;/*主循环次数*/
   \   00000010   0xF647 0x70FF      MOVW     R0,#+32767
   \   00000014   0x....             LDR.N    R1,??DataTable3_6
   \   00000016   0x8088             STRH     R0,[R1, #+4]
     69            DMA_Struct1.DMA_MinorByteCnt=1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR.N    R1,??DataTable3_6
   \   0000001C   0x6088             STR      R0,[R1, #+8]
     70            DMA_Struct1.DMA_SourceAddr=(uint32)&PTB->PDIR;
   \   0000001E   0x....             LDR.N    R0,??DataTable3_16  ;; 0x400ff050
   \   00000020   0x....             LDR.N    R1,??DataTable3_6
   \   00000022   0x60C8             STR      R0,[R1, #+12]
     71            DMA_Struct1.DMA_DestAddr=(uint32)Data1;
   \   00000024   0x....             LDR.N    R0,??DataTable3_17
   \   00000026   0x....             LDR.N    R1,??DataTable3_6
   \   00000028   0x6188             STR      R0,[R1, #+24]
     72            DMA_Struct1.DMA_Isr=DMA1_isr;
   \   0000002A   0x.... 0x....      ADR.W    R0,DMA1_isr
   \   0000002E   0x....             LDR.N    R1,??DataTable3_6
   \   00000030   0x6288             STR      R0,[R1, #+40]
     73            LPLD_DMA_Init(DMA_Struct1);
   \   00000032   0x....             LDR.N    R1,??DataTable3_6
   \   00000034   0xB084             SUB      SP,SP,#+16
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x222C             MOVS     R2,#+44
   \   0000003A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003E   0xBC0F             POP      {R0-R3}
   \   00000040   0x.... 0x....      BL       LPLD_DMA_Init
     74            
     75            DMA_Struct2.DMA_CHx=DMA_CH2;
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x....             LDR.N    R1,??DataTable3_7
   \   00000048   0x7008             STRB     R0,[R1, #+0]
     76            DMA_Struct2.DMA_Req=PORTC_DMAREQ;
   \   0000004A   0x2033             MOVS     R0,#+51
   \   0000004C   0x....             LDR.N    R1,??DataTable3_7
   \   0000004E   0x7048             STRB     R0,[R1, #+1]
     77            DMA_Struct2.DMA_MajorLoopCnt=DMA_MAX_NUM;/*主循环次数*/
   \   00000050   0xF647 0x70FF      MOVW     R0,#+32767
   \   00000054   0x....             LDR.N    R1,??DataTable3_7
   \   00000056   0x8088             STRH     R0,[R1, #+4]
     78            DMA_Struct2.DMA_MinorByteCnt=1;
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x....             LDR.N    R1,??DataTable3_7
   \   0000005C   0x6088             STR      R0,[R1, #+8]
     79            DMA_Struct2.DMA_SourceAddr=(uint32)&PTC->PDIR+1;
   \   0000005E   0x....             LDR.N    R0,??DataTable3_18  ;; 0x400ff091
   \   00000060   0x....             LDR.N    R1,??DataTable3_7
   \   00000062   0x60C8             STR      R0,[R1, #+12]
     80            DMA_Struct2.DMA_DestAddr=(uint32)Data2;
   \   00000064   0x....             LDR.N    R0,??DataTable3_19
   \   00000066   0x....             LDR.N    R1,??DataTable3_7
   \   00000068   0x6188             STR      R0,[R1, #+24]
     81            DMA_Struct2.DMA_Isr=DMA2_isr;
   \   0000006A   0x.... 0x....      ADR.W    R0,DMA2_isr
   \   0000006E   0x....             LDR.N    R1,??DataTable3_7
   \   00000070   0x6288             STR      R0,[R1, #+40]
     82            LPLD_DMA_Init(DMA_Struct2);
   \   00000072   0x....             LDR.N    R1,??DataTable3_7
   \   00000074   0xB084             SUB      SP,SP,#+16
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x222C             MOVS     R2,#+44
   \   0000007A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000007E   0xBC0F             POP      {R0-R3}
   \   00000080   0x.... 0x....      BL       LPLD_DMA_Init
     83            
     84            LPLD_DMA_EnableReq(DMA_CH1);
   \   00000084   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4000800c
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000008C   0x....             LDR.N    R1,??DataTable3_8  ;; 0x4000800c
   \   0000008E   0x6008             STR      R0,[R1, #+0]
     85            LPLD_DMA_EnableIrq(DMA_Struct1);
   \   00000090   0x....             LDR.N    R1,??DataTable3_6
   \   00000092   0xB084             SUB      SP,SP,#+16
   \   00000094   0x4668             MOV      R0,SP
   \   00000096   0x222C             MOVS     R2,#+44
   \   00000098   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000009C   0xBC0F             POP      {R0-R3}
   \   0000009E   0x.... 0x....      BL       LPLD_DMA_EnableIrq
     86            
     87            LPLD_DMA_EnableReq(DMA_CH2);
   \   000000A2   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4000800c
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000AA   0x....             LDR.N    R1,??DataTable3_8  ;; 0x4000800c
   \   000000AC   0x6008             STR      R0,[R1, #+0]
     88            LPLD_DMA_EnableIrq(DMA_Struct2);      
   \   000000AE   0x....             LDR.N    R1,??DataTable3_7
   \   000000B0   0xB084             SUB      SP,SP,#+16
   \   000000B2   0x4668             MOV      R0,SP
   \   000000B4   0x222C             MOVS     R2,#+44
   \   000000B6   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000BA   0xBC0F             POP      {R0-R3}
   \   000000BC   0x.... 0x....      BL       LPLD_DMA_EnableIrq
     89          }
   \   000000C0   0xB007             ADD      SP,SP,#+28
   \   000000C2   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
     90          void DMA1_isr(void)
     91          {
   \                     DMA1_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     92            ch0_over_cnt++;//通道0溢出累加  
   \   00000004   0x....             LDR.N    R0,??DataTable3_4
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable3_4
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     93            LPLD_DMA_Init(DMA_Struct1); 
   \   0000000E   0x....             LDR.N    R1,??DataTable3_6
   \   00000010   0xB084             SUB      SP,SP,#+16
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x222C             MOVS     R2,#+44
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001A   0xBC0F             POP      {R0-R3}
   \   0000001C   0x.... 0x....      BL       LPLD_DMA_Init
     94          }
   \   00000020   0xB007             ADD      SP,SP,#+28
   \   00000022   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
     95          void DMA2_isr(void)
     96          {
   \                     DMA2_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     97            ch1_over_cnt++;//通道1溢出累加
   \   00000004   0x....             LDR.N    R0,??DataTable3_5
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable3_5
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     98            LPLD_DMA_Init(DMA_Struct2); 
   \   0000000E   0x....             LDR.N    R1,??DataTable3_7
   \   00000010   0xB084             SUB      SP,SP,#+16
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x222C             MOVS     R2,#+44
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001A   0xBC0F             POP      {R0-R3}
   \   0000001C   0x.... 0x....      BL       LPLD_DMA_Init
     99          }
   \   00000020   0xB007             ADD      SP,SP,#+28
   \   00000022   0xBD00             POP      {PC}             ;; return
    100          //将测到的脉冲累加即为速度量

   \                                 In section .text, align 2, keep-with-next
    101          float speedPlus(float aa[],int number)
    102          {
   \                     speedPlus: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    103          int i;
    104          float speedNow=0;
   \   00000006   0x2700             MOVS     R7,#+0
    105          for(i=0;i<number;i++)
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xE006             B.N      ??speedPlus_0
    106          {
    107          speedNow+=aa[i];
   \                     ??speedPlus_1: (+1)
   \   0000000C   0xF854 0x0026      LDR      R0,[R4, R6, LSL #+2]
   \   00000010   0x0039             MOVS     R1,R7
   \   00000012   0x.... 0x....      BL       __aeabi_fadd
   \   00000016   0x0007             MOVS     R7,R0
    108            }
   \   00000018   0x1C76             ADDS     R6,R6,#+1
   \                     ??speedPlus_0: (+1)
   \   0000001A   0x42AE             CMP      R6,R5
   \   0000001C   0xDBF6             BLT.N    ??speedPlus_1
    109          return speedNow/number;//返回平均值
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0x.... 0x....      BL       __aeabi_i2f
   \   00000024   0x0001             MOVS     R1,R0
   \   00000026   0x0038             MOVS     R0,R7
   \   00000028   0x.... 0x....      BL       __aeabi_fdiv
   \   0000002C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    110          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40009036         DC32     0x40009036

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ch0_pulseacc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x40009056         DC32     0x40009056

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ch1_pulseacc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ch0_over_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ch1_over_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     DMA_Struct1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     DMA_Struct2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x43FE0A24         DC32     0x43fe0a24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     Speed_LQ_now

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x43FE1240         DC32     0x43fe1240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     Speed_RQ_now

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     speed_L

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     speed_R

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     speed_avg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x400FF050         DC32     0x400ff050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x........         DC32     Data1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x400FF091         DC32     0x400ff091

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x........         DC32     Data2

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   DMA1_isr
        32   -> LPLD_DMA_Init
        48   -> __aeabi_memcpy4
      48   DMA2_isr
        32   -> LPLD_DMA_Init
        48   -> __aeabi_memcpy4
      48   DMA_Init
        32   -> LPLD_DMA_EnableIrq
        32   -> LPLD_DMA_Init
        48   -> __aeabi_memcpy4
      48   GetMotorPulse
        32   -> LPLD_DMA_Init
        32   -> __aeabi_fadd
        32   -> __aeabi_fdiv
        32   -> __aeabi_i2f
        48   -> __aeabi_memcpy4
        32   -> speedPlus
      24   speedPlus
        24   -> __aeabi_fadd
        24   -> __aeabi_fdiv
        24   -> __aeabi_i2f


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      36  DMA1_isr
      36  DMA2_isr
     196  DMA_Init
      44  DMA_Struct1
      44  DMA_Struct2
       1  Data1
       1  Data2
     370  GetMotorPulse
      40  Speed_LQ_now
      40  Speed_RQ_now
       4  ch0_over_cnt
       4  ch0_pulseacc
       4  ch1_over_cnt
       4  ch1_pulseacc
      46  speedPlus
       4  speed_L
       4  speed_R
       4  speed_avg

 
 198 bytes in section .bss
 764 bytes in section .text
 
 764 bytes of CODE memory
 198 bytes of DATA memory

Errors: none
Warnings: none
