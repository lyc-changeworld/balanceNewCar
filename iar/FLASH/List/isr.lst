###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        16/Aug/2016  15:26:20
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\isr.c
#    Command line =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\isr.c -D LPLD_K60 -D
#        USE_K60D10 -lCN
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\ -lB
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\ -o
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "F:\Program
#        Files\IAR_FOR_ARM\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\app\ -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\CPU\ -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\common\
#        -I E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\HW\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\FatFs\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\FatFs\option\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\common\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\driver\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\descriptor\
#        -I
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\..\..\..\lib\USB\class\
#        -Ol -I "F:\Program Files\IAR_FOR_ARM\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\List\isr.lst
#    Object file  =  
#        E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\iar\FLASH\Obj\isr.o
#
###############################################################################

E:\LPLD_OSKinetis_V3.1\project\balanceNewCar\app\isr.c
      1          #include "isr.h"
      2          #include "init.h"
      3          #include "speed.h"

   \                                 In section .bss, align 4
      4          int runTime = 0;
   \                     runTime:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
      5          int stopTime = 0;
   \                     stopTime:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
      6          uint8 stopFlag = 0;
   \                     stopFlag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
      7          int gyro_xMax = 0;
   \                     gyro_xMax:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
      8          int goDieFlag = 0;
   \                     goDieFlag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
      9          int straightTime = 0;
   \                     straightTime:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     10          int curveTime = 0;
   \                     curveTime:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     11          uint32 Count=0;//5ms定时计数量
   \                     Count:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     12          uint32 start_flag=0,direct_start=0,oled_flag=0,direct_flag=0,SpeedCatch_flag=0;
   \                     start_flag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     direct_start:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     oled_flag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     direct_flag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     SpeedCatch_flag:
   \   00000000                      DS8 4
     13          extern uint8 stopCarSetFlag;
     14          void SendData(void);

   \                                 In section .text, align 2, keep-with-next
     15          void pit0_isr(void) 
     16          {  
   \                     pit0_isr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     17            if(runTime < 60000)
   \   00000002   0x....             LDR.N    R0,??DataTable1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF64E 0x2160      MOVW     R1,#+60000
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xDA04             BGE.N    ??pit0_isr_0
     18              runTime++;
   \   0000000E   0x....             LDR.N    R0,??DataTable1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x....             LDR.N    R1,??DataTable1
   \   00000016   0x6008             STR      R0,[R1, #+0]
     19            if(start_flag<50) start_flag++;
   \                     ??pit0_isr_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable1_1
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x2832             CMP      R0,#+50
   \   0000001E   0xD205             BCS.N    ??pit0_isr_1
   \   00000020   0x....             LDR.N    R0,??DataTable1_1
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable1_1
   \   00000028   0x6008             STR      R0,[R1, #+0]
   \   0000002A   0xE002             B.N      ??pit0_isr_2
     20            else {direct_start=1;} 
   \                     ??pit0_isr_1: (+1)
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x....             LDR.N    R1,??DataTable1_2
   \   00000030   0x6008             STR      R0,[R1, #+0]
     21            direct_flag++;                                     //差速计算标志
   \                     ??pit0_isr_2: (+1)
   \   00000032   0x....             LDR.N    R0,??DataTable1_3
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0x....             LDR.N    R1,??DataTable1_3
   \   0000003A   0x6008             STR      R0,[R1, #+0]
     22            SpeedCatch_flag++;                                 //
   \   0000003C   0x....             LDR.N    R0,??DataTable1_4
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x1C40             ADDS     R0,R0,#+1
   \   00000042   0x....             LDR.N    R1,??DataTable1_4
   \   00000044   0x6008             STR      R0,[R1, #+0]
     23            oled_flag++;                                       //oled显示标志
   \   00000046   0x....             LDR.N    R0,??DataTable1_5
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \   0000004C   0x....             LDR.N    R1,??DataTable1_5
   \   0000004E   0x6008             STR      R0,[R1, #+0]
     24            GetMotorPulse();                                   //测量当前的速度量,并进行速度pid计算得到电机量
   \   00000050   0x.... 0x....      BL       GetMotorPulse
     25            speed_control();                                   //速度电机量计算 5ms
   \   00000054   0x.... 0x....      BL       speed_control
     26            for(int i=0;i<10;i++){
   \   00000058   0x2400             MOVS     R4,#+0
   \   0000005A   0xE002             B.N      ??pit0_isr_3
     27              get_accl();                                      //加速度数据值采样 
   \                     ??pit0_isr_4: (+1)
   \   0000005C   0x.... 0x....      BL       get_accl
     28            }
   \   00000060   0x1C64             ADDS     R4,R4,#+1
   \                     ??pit0_isr_3: (+1)
   \   00000062   0x2C0A             CMP      R4,#+10
   \   00000064   0xDBFA             BLT.N    ??pit0_isr_4
     29            get_gyro();                                        //陀螺仪AD采样求角速度
   \   00000066   0x.... 0x....      BL       get_gyro
     30            ronghe_angle();                                    //互补滤波得到清漂后的角度
   \   0000006A   0x.... 0x....      BL       ronghe_angle
     31            
     32            DirectionSpeedControl();                         //差速电机量计算
   \   0000006E   0x.... 0x....      BL       DirectionSpeedControl
     33          //  if(direct_flag==2){
     34          //    direct_flag=0;
     35          //    DirectionSpeedControl();                         //差速电机量计算 
     36          //  }
     37            
     38            //50ms
     39            speed_control();  
   \   00000072   0x.... 0x....      BL       speed_control
     40          //  if(SpeedCatch_flag==10){                           
     41          //    SpeedCatch_flag=0;
     42          //    speed_control();                                 //速度电机量计算
     43          //  }
     44            
     45            SpeedControlOutput();                             //速度角度量平缓输出   50ms/10
   \   00000076   0x.... 0x....      BL       SpeedControlOutput
     46            DirectionSpeedOut();                              //差速电机量平缓输出   10ms/2
   \   0000007A   0x.... 0x....      BL       DirectionSpeedOut
     47            angle_control();                                  //直立电机量输出
   \   0000007E   0x.... 0x....      BL       angle_control
     48          //  Motor_Control(); 
     49            if(stopFlag==0)
   \   00000082   0x....             LDR.N    R0,??DataTable1_6
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD11E             BNE.N    ??pit0_isr_5
     50            {
     51              if(goDieFlag>80)  
   \   0000008A   0x....             LDR.N    R0,??DataTable1_7
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x2851             CMP      R0,#+81
   \   00000090   0xDB02             BLT.N    ??pit0_isr_6
     52              {
     53                Motor_Stop();
   \   00000092   0x.... 0x....      BL       Motor_Stop
   \   00000096   0xE019             B.N      ??pit0_isr_7
     54              }else if(stopCarSetFlag==1 && !PTE26_I && runTime > 1000) 
   \                     ??pit0_isr_6: (+1)
   \   00000098   0x....             LDR.N    R0,??DataTable1_8
   \   0000009A   0x7800             LDRB     R0,[R0, #+0]
   \   0000009C   0x2801             CMP      R0,#+1
   \   0000009E   0xD110             BNE.N    ??pit0_isr_8
   \   000000A0   0x....             LDR.N    R0,??DataTable1_9  ;; 0x43fe2268
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD10C             BNE.N    ??pit0_isr_8
   \   000000A8   0x....             LDR.N    R0,??DataTable1
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000000B0   0xDD07             BLE.N    ??pit0_isr_8
     55              {
     56                stopFlag = 1;
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x....             LDR.N    R1,??DataTable1_6
   \   000000B6   0x7008             STRB     R0,[R1, #+0]
     57                stopTime = runTime;
   \   000000B8   0x....             LDR.N    R0,??DataTable1
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x....             LDR.N    R1,??DataTable1_10
   \   000000BE   0x6008             STR      R0,[R1, #+0]
   \   000000C0   0xE004             B.N      ??pit0_isr_7
     58                //Motor_Stop();
     59                //DisableInterrupts;
     60              }else{
     61                Motor_Control();
   \                     ??pit0_isr_8: (+1)
   \   000000C2   0x.... 0x....      BL       Motor_Control
   \   000000C6   0xE001             B.N      ??pit0_isr_7
     62              }
     63            }else{
     64              Motor_Stop();
   \                     ??pit0_isr_5: (+1)
   \   000000C8   0x.... 0x....      BL       Motor_Stop
     65          //    if(runTime - stopTime < 40)
     66          //    {
     67          //      Motor_TurnBack();
     68          //    }else{
     69          //      Motor_Stop();
     70          //    }
     71            }
     72            
     73            
     74          
     75            if(oled_flag==20){oled_flag=0;show_info();}
   \                     ??pit0_isr_7: (+1)
   \   000000CC   0x....             LDR.N    R0,??DataTable1_5
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0x2814             CMP      R0,#+20
   \   000000D2   0xD104             BNE.N    ??pit0_isr_9
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x....             LDR.N    R1,??DataTable1_5
   \   000000D8   0x6008             STR      R0,[R1, #+0]
   \   000000DA   0x.... 0x....      BL       show_info
     76            if(AD_result[0]+AD_result[2]<30)
   \                     ??pit0_isr_9: (+1)
   \   000000DE   0x....             LDR.N    R0,??DataTable1_11
   \   000000E0   0x6801             LDR      R1,[R0, #+0]
   \   000000E2   0x....             LDR.N    R0,??DataTable1_11
   \   000000E4   0x6880             LDR      R0,[R0, #+8]
   \   000000E6   0x.... 0x....      BL       __aeabi_fadd
   \   000000EA   0x....             LDR.N    R1,??DataTable1_12  ;; 0x41f00000
   \   000000EC   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000F0   0xD20F             BCS.N    ??pit0_isr_10
     77            {
     78              if(goDieFlag<1000)
   \   000000F2   0x....             LDR.N    R0,??DataTable1_7
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000000FA   0xDA05             BGE.N    ??pit0_isr_11
     79              {
     80                goDieFlag++;
   \   000000FC   0x....             LDR.N    R0,??DataTable1_7
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0x1C40             ADDS     R0,R0,#+1
   \   00000102   0x....             LDR.N    R1,??DataTable1_7
   \   00000104   0x6008             STR      R0,[R1, #+0]
   \   00000106   0xE007             B.N      ??pit0_isr_12
     81              }else{
     82                goDieFlag=1000;
   \                     ??pit0_isr_11: (+1)
   \   00000108   0xF44F 0x707A      MOV      R0,#+1000
   \   0000010C   0x....             LDR.N    R1,??DataTable1_7
   \   0000010E   0x6008             STR      R0,[R1, #+0]
   \   00000110   0xE002             B.N      ??pit0_isr_12
     83              }
     84            }else{goDieFlag = 0;}
   \                     ??pit0_isr_10: (+1)
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0x....             LDR.N    R1,??DataTable1_7
   \   00000116   0x6008             STR      R0,[R1, #+0]
     85          
     86            
     87            if(fabs(offset) < 0.2)//0.20
   \                     ??pit0_isr_12: (+1)
   \   00000118   0x....             LDR.N    R0,??DataTable1_13
   \   0000011A   0x6800             LDR      R0,[R0, #+0]
   \   0000011C   0x.... 0x....      BL       __aeabi_f2d
   \   00000120   0xF031 0x4100      BICS     R1,R1,#0x80000000
   \   00000124   0x....             LDR.N    R2,??DataTable1_14  ;; 0x9999999a
   \   00000126   0x....             LDR.N    R3,??DataTable1_15  ;; 0x3fc99999
   \   00000128   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000012C   0xD211             BCS.N    ??pit0_isr_13
     88            {
     89              if(straightTime < 1000)
   \   0000012E   0x....             LDR.N    R0,??DataTable1_16
   \   00000130   0x6800             LDR      R0,[R0, #+0]
   \   00000132   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000136   0xDA04             BGE.N    ??pit0_isr_14
     90              {
     91                straightTime ++;
   \   00000138   0x....             LDR.N    R0,??DataTable1_16
   \   0000013A   0x6800             LDR      R0,[R0, #+0]
   \   0000013C   0x1C40             ADDS     R0,R0,#+1
   \   0000013E   0x....             LDR.N    R1,??DataTable1_16
   \   00000140   0x6008             STR      R0,[R1, #+0]
     92              }
     93              if(straightTime>10)
   \                     ??pit0_isr_14: (+1)
   \   00000142   0x....             LDR.N    R0,??DataTable1_16
   \   00000144   0x6800             LDR      R0,[R0, #+0]
   \   00000146   0x280B             CMP      R0,#+11
   \   00000148   0xDB14             BLT.N    ??pit0_isr_15
     94                curveTime=0;
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0x....             LDR.N    R1,??DataTable1_17
   \   0000014E   0x6008             STR      R0,[R1, #+0]
   \   00000150   0xE010             B.N      ??pit0_isr_15
     95            }else{
     96              if(curveTime < 1000)
   \                     ??pit0_isr_13: (+1)
   \   00000152   0x....             LDR.N    R0,??DataTable1_17
   \   00000154   0x6800             LDR      R0,[R0, #+0]
   \   00000156   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000015A   0xDA04             BGE.N    ??pit0_isr_16
     97                curveTime++;
   \   0000015C   0x....             LDR.N    R0,??DataTable1_17
   \   0000015E   0x6800             LDR      R0,[R0, #+0]
   \   00000160   0x1C40             ADDS     R0,R0,#+1
   \   00000162   0x....             LDR.N    R1,??DataTable1_17
   \   00000164   0x6008             STR      R0,[R1, #+0]
     98              if(curveTime>10)
   \                     ??pit0_isr_16: (+1)
   \   00000166   0x....             LDR.N    R0,??DataTable1_17
   \   00000168   0x6800             LDR      R0,[R0, #+0]
   \   0000016A   0x280B             CMP      R0,#+11
   \   0000016C   0xDB02             BLT.N    ??pit0_isr_15
     99                straightTime = 0;
   \   0000016E   0x2000             MOVS     R0,#+0
   \   00000170   0x....             LDR.N    R1,??DataTable1_16
   \   00000172   0x6008             STR      R0,[R1, #+0]
    100            }
    101            //  SendData();
    102          }
   \                     ??pit0_isr_15: (+1)
   \   00000174   0xBD10             POP      {R4,PC}          ;; return
    103          

   \                                 In section .text, align 2, keep-with-next
    104          void SendData(void)
    105          {
   \                     SendData: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    106              //  Send_Data[0]= speedout1*10;
    107            //  Send_Data[1]= offset*30;
    108              Send_Data[1]=R_PowerValue;
   \   00000002   0x....             LDR.N    R0,??DataTable1_18
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       __aeabi_f2iz
   \   0000000A   0x....             LDR.N    R1,??DataTable1_19
   \   0000000C   0x8048             STRH     R0,[R1, #+2]
    109              Send_Data[0]=L_PowerValue;
   \   0000000E   0x....             LDR.N    R0,??DataTable1_20
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       __aeabi_f2iz
   \   00000016   0x....             LDR.N    R1,??DataTable1_19
   \   00000018   0x8008             STRH     R0,[R1, #+0]
    110              Send_Data[2]=offset*100;
   \   0000001A   0x....             LDR.N    R0,??DataTable1_13
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0x....             LDR.N    R0,??DataTable1_21  ;; 0x42c80000
   \   00000020   0x.... 0x....      BL       __aeabi_fmul
   \   00000024   0x.... 0x....      BL       __aeabi_f2iz
   \   00000028   0x....             LDR.N    R1,??DataTable1_19
   \   0000002A   0x8088             STRH     R0,[R1, #+4]
    111            //  Send_Data[3]=gyro_speed_x;
    112            //  Send_Data[3]=speed_avg;
    113            //  Send_Data[1]=SA*10;
    114            //  Send_Data[0]= angle;
    115            //  Send_Data[1]=accl_angle_Y;
    116            //  Send_Data[0]= 100.0*offset;
    117            //  Send_Data[1]= 100.0*D_err;
    118            //  Send_Data[2] = SpeedAlone_P1;
    119            //  Send_Data[0] = AD_result[2];//angle,speed_L  
    120            //  Send_Data[1] = AD_result[1];
    121            //  Send_Data[2] = AD_result[3];
    122            //  Send_Data[2] = second_offset;
    123            //  Send_Data[3] = AD_2;
    124            //  Send_Data[3] = offset;
    125            //  Send_Data[1]=AD_result[2];//D_dir_err;//accl_angle_Y,
    126            //  Send_Data[2]=gyro_speed_x;//gyro_speed,speed_avg，
    127              OutPut_Data();
   \   0000002C   0x.... 0x....      BL       OutPut_Data
    128          }
   \   00000030   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     runTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     start_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     direct_start

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     direct_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     SpeedCatch_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     oled_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     stopFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     goDieFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     stopCarSetFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x43FE2268         DC32     0x43fe2268

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     stopTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     AD_result

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x41F00000         DC32     0x41f00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x........         DC32     offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x3FC99999         DC32     0x3fc99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x........         DC32     straightTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   0x........         DC32     curveTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   0x........         DC32     R_PowerValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   0x........         DC32     Send_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \   00000000   0x........         DC32     L_PowerValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \   00000000   0x42C80000         DC32     0x42c80000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SendData
         8   -> OutPut_Data
         8   -> __aeabi_f2iz
         8   -> __aeabi_fmul
       8   pit0_isr
         8   -> DirectionSpeedControl
         8   -> DirectionSpeedOut
         8   -> GetMotorPulse
         8   -> Motor_Control
         8   -> Motor_Stop
         8   -> SpeedControlOutput
         8   -> __aeabi_f2d
         8   -> __aeabi_fadd
         8   -> angle_control
         8   -> get_accl
         8   -> get_gyro
         8   -> ronghe_angle
         8   -> show_info
         8   -> speed_control
         8 __aeabi_cdcmple
         8 __aeabi_cfcmple


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       4  Count
      50  SendData
       4  SpeedCatch_flag
       4  curveTime
       4  direct_flag
       4  direct_start
       4  goDieFlag
       4  gyro_xMax
       4  oled_flag
     374  pit0_isr
       4  runTime
       4  start_flag
       1  stopFlag
       4  stopTime
       4  straightTime

 
  49 bytes in section .bss
 512 bytes in section .text
 
 512 bytes of CODE memory
  49 bytes of DATA memory

Errors: none
Warnings: 4
